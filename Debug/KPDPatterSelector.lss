
KPDPatterSelector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003546  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00003546  000035da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800080  00800080  000035fa  2**0
                  ALLOC
  3 .stab         00002c4c  00000000  00000000  000035fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d83  00000000  00000000  00006248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000712b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000072ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000092ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a400  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b384  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b504  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b7c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c054  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 39 12 	call	0x2472	; 0x2472 <main>
      8a:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MDIO_IntialPins>:
#include "STD_TYPES.h"

/* Set Intial Direction Function */

void MDIO_IntialPins(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

	PRIVATE_DDRA_REG = PRIVATE_CONC(MDIO_PA7_A_DIR,
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	80 83       	st	Z, r24
									MDIO_PA3_A_DIR,
									MDIO_PA2_A_DIR,
									MDIO_PA1_A_DIR,
									MDIO_PA0_A_DIR);

	PRIVATE_DDRB_REG = PRIVATE_CONC(MDIO_PA7_B_DIR,
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24
									MDIO_PA4_B_DIR,
									MDIO_PA3_B_DIR,
									MDIO_PA2_B_DIR,
									MDIO_PA1_B_DIR,
									MDIO_PA0_B_DIR);
	PRIVATE_DDRC_REG = PRIVATE_CONC(MDIO_PA7_C_DIR,
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f e0       	ldi	r24, 0x0F	; 15
     cbc:	80 83       	st	Z, r24
									MDIO_PA4_C_DIR,
									MDIO_PA3_C_DIR,
									MDIO_PA2_C_DIR,
									MDIO_PA1_C_DIR,
									MDIO_PA0_C_DIR);
	PRIVATE_DDRD_REG = PRIVATE_CONC(MDIO_PA7_D_DIR,
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	80 83       	st	Z, r24
									MDIO_PA3_D_DIR,
									MDIO_PA2_D_DIR,
									MDIO_PA1_D_DIR,
									MDIO_PA0_D_DIR);

	PRIVATE_PORTA_REG = PRIVATE_CONC(MDIO_PA7_A_INIT_VALUE,
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1
									 MDIO_PA3_A_INIT_VALUE,
									 MDIO_PA2_A_INIT_VALUE,
									 MDIO_PA1_A_INIT_VALUE,
									 MDIO_PA0_A_INIT_VALUE);

	PRIVATE_PORTB_REG = PRIVATE_CONC(MDIO_PA7_B_INIT_VALUE,
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1
									 MDIO_PA3_B_INIT_VALUE,
									 MDIO_PA2_B_INIT_VALUE,
									 MDIO_PA1_B_INIT_VALUE,
									 MDIO_PA0_B_INIT_VALUE);

	PRIVATE_PORTC_REG = PRIVATE_CONC(MDIO_PA7_C_INIT_VALUE,
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	80 83       	st	Z, r24
									 MDIO_PA3_C_INIT_VALUE,
									 MDIO_PA2_C_INIT_VALUE,
									 MDIO_PA1_C_INIT_VALUE,
									 MDIO_PA0_C_INIT_VALUE);

	PRIVATE_PORTD_REG = PRIVATE_CONC(MDIO_PA7_D_INIT_VALUE,
     cda:	e2 e3       	ldi	r30, 0x32	; 50
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	10 82       	st	Z, r1
									 MDIO_PA4_D_INIT_VALUE,
									 MDIO_PA3_D_INIT_VALUE,
									 MDIO_PA2_D_INIT_VALUE,
									 MDIO_PA1_D_INIT_VALUE,
									 MDIO_PA0_D_INIT_VALUE);
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <MDIO_u8SetPinDirection>:

/* Set Pin Direction */
u8 MDIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirec)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <MDIO_u8SetPinDirection+0x6>
     cec:	00 d0       	rcall	.+0      	; 0xcee <MDIO_u8SetPinDirection+0x8>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <MDIO_u8SetPinDirection+0xa>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	8a 83       	std	Y+2, r24	; 0x02
     cf6:	6b 83       	std	Y+3, r22	; 0x03
     cf8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorSate = STD_TYPE_OK;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinId <= MDIO_PIN_7 && Copy_u8PortId <= MDIO_PORTD && Copy_u8PinDirec <= MDIO_INPUT_PULLED_UP)
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	88 30       	cpi	r24, 0x08	; 8
     d02:	08 f0       	brcs	.+2      	; 0xd06 <MDIO_u8SetPinDirection+0x20>
     d04:	91 c1       	rjmp	.+802    	; 0x1028 <MDIO_u8SetPinDirection+0x342>
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	84 30       	cpi	r24, 0x04	; 4
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <MDIO_u8SetPinDirection+0x28>
     d0c:	8d c1       	rjmp	.+794    	; 0x1028 <MDIO_u8SetPinDirection+0x342>
     d0e:	8c 81       	ldd	r24, Y+4	; 0x04
     d10:	83 30       	cpi	r24, 0x03	; 3
     d12:	08 f0       	brcs	.+2      	; 0xd16 <MDIO_u8SetPinDirection+0x30>
     d14:	89 c1       	rjmp	.+786    	; 0x1028 <MDIO_u8SetPinDirection+0x342>
	{
		/* Select Pin Direction */
		switch (Copy_u8PortId)
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	3e 83       	std	Y+6, r19	; 0x06
     d1e:	2d 83       	std	Y+5, r18	; 0x05
     d20:	8d 81       	ldd	r24, Y+5	; 0x05
     d22:	9e 81       	ldd	r25, Y+6	; 0x06
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	91 05       	cpc	r25, r1
     d28:	09 f4       	brne	.+2      	; 0xd2c <MDIO_u8SetPinDirection+0x46>
     d2a:	71 c0       	rjmp	.+226    	; 0xe0e <MDIO_u8SetPinDirection+0x128>
     d2c:	2d 81       	ldd	r18, Y+5	; 0x05
     d2e:	3e 81       	ldd	r19, Y+6	; 0x06
     d30:	22 30       	cpi	r18, 0x02	; 2
     d32:	31 05       	cpc	r19, r1
     d34:	2c f4       	brge	.+10     	; 0xd40 <MDIO_u8SetPinDirection+0x5a>
     d36:	8d 81       	ldd	r24, Y+5	; 0x05
     d38:	9e 81       	ldd	r25, Y+6	; 0x06
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	71 f0       	breq	.+28     	; 0xd5a <MDIO_u8SetPinDirection+0x74>
     d3e:	75 c1       	rjmp	.+746    	; 0x102a <MDIO_u8SetPinDirection+0x344>
     d40:	2d 81       	ldd	r18, Y+5	; 0x05
     d42:	3e 81       	ldd	r19, Y+6	; 0x06
     d44:	22 30       	cpi	r18, 0x02	; 2
     d46:	31 05       	cpc	r19, r1
     d48:	09 f4       	brne	.+2      	; 0xd4c <MDIO_u8SetPinDirection+0x66>
     d4a:	bb c0       	rjmp	.+374    	; 0xec2 <MDIO_u8SetPinDirection+0x1dc>
     d4c:	8d 81       	ldd	r24, Y+5	; 0x05
     d4e:	9e 81       	ldd	r25, Y+6	; 0x06
     d50:	83 30       	cpi	r24, 0x03	; 3
     d52:	91 05       	cpc	r25, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <MDIO_u8SetPinDirection+0x72>
     d56:	0f c1       	rjmp	.+542    	; 0xf76 <MDIO_u8SetPinDirection+0x290>
     d58:	68 c1       	rjmp	.+720    	; 0x102a <MDIO_u8SetPinDirection+0x344>
		{
		case MDIO_PORTA:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	88 23       	and	r24, r24
     d5e:	a1 f4       	brne	.+40     	; 0xd88 <MDIO_u8SetPinDirection+0xa2>
			{
				/*Set DDRA Pin in DDRA Reg*/
				SET_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
     d60:	aa e3       	ldi	r26, 0x3A	; 58
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	ea e3       	ldi	r30, 0x3A	; 58
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 2e       	mov	r0, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <MDIO_u8SetPinDirection+0x98>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	0a 94       	dec	r0
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <MDIO_u8SetPinDirection+0x94>
     d82:	84 2b       	or	r24, r20
     d84:	8c 93       	st	X, r24
     d86:	51 c1       	rjmp	.+674    	; 0x102a <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	a9 f4       	brne	.+42     	; 0xdb8 <MDIO_u8SetPinDirection+0xd2>
			{
				/*Clear DDRA Pin in DDRA Reg*/
				CLEAR_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
     d8e:	aa e3       	ldi	r26, 0x3A	; 58
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ea e3       	ldi	r30, 0x3A	; 58
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <MDIO_u8SetPinDirection+0xc6>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <MDIO_u8SetPinDirection+0xc2>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	39 c1       	rjmp	.+626    	; 0x102a <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <MDIO_u8SetPinDirection+0xda>
     dbe:	35 c1       	rjmp	.+618    	; 0x102a <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRA Pin in DDRA Reg*/
				CLEAR_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
     dc0:	aa e3       	ldi	r26, 0x3A	; 58
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	ea e3       	ldi	r30, 0x3A	; 58
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	48 2f       	mov	r20, r24
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <MDIO_u8SetPinDirection+0xf6>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	2a 95       	dec	r18
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <MDIO_u8SetPinDirection+0xf2>
     de0:	80 95       	com	r24
     de2:	84 23       	and	r24, r20
     de4:	8c 93       	st	X, r24
				/*Set PORTA Pin in DDRA Reg*/
				SET_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
     de6:	ab e3       	ldi	r26, 0x3B	; 59
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	eb e3       	ldi	r30, 0x3B	; 59
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <MDIO_u8SetPinDirection+0x11e>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <MDIO_u8SetPinDirection+0x11a>
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	0e c1       	rjmp	.+540    	; 0x102a <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
     e10:	88 23       	and	r24, r24
     e12:	a1 f4       	brne	.+40     	; 0xe3c <MDIO_u8SetPinDirection+0x156>
			{
				/*Set DDRB Pin in DDRB Reg*/
				SET_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
     e14:	a7 e3       	ldi	r26, 0x37	; 55
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e7 e3       	ldi	r30, 0x37	; 55
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <MDIO_u8SetPinDirection+0x14c>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <MDIO_u8SetPinDirection+0x148>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	f7 c0       	rjmp	.+494    	; 0x102a <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	a9 f4       	brne	.+42     	; 0xe6c <MDIO_u8SetPinDirection+0x186>
			{
				/*Clear DDRB Pin in DDRB Reg*/
				CLEAR_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
     e42:	a7 e3       	ldi	r26, 0x37	; 55
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e7 e3       	ldi	r30, 0x37	; 55
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 2e       	mov	r0, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <MDIO_u8SetPinDirection+0x17a>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <MDIO_u8SetPinDirection+0x176>
     e64:	80 95       	com	r24
     e66:	84 23       	and	r24, r20
     e68:	8c 93       	st	X, r24
     e6a:	df c0       	rjmp	.+446    	; 0x102a <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	09 f0       	breq	.+2      	; 0xe74 <MDIO_u8SetPinDirection+0x18e>
     e72:	db c0       	rjmp	.+438    	; 0x102a <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRB Pin in DDRB Reg*/
				CLEAR_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
     e74:	a7 e3       	ldi	r26, 0x37	; 55
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e7 e3       	ldi	r30, 0x37	; 55
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <MDIO_u8SetPinDirection+0x1aa>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	2a 95       	dec	r18
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <MDIO_u8SetPinDirection+0x1a6>
     e94:	80 95       	com	r24
     e96:	84 23       	and	r24, r20
     e98:	8c 93       	st	X, r24
				/*Set PORTB Pin in DDRB Reg*/
				SET_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
     e9a:	a8 e3       	ldi	r26, 0x38	; 56
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e8 e3       	ldi	r30, 0x38	; 56
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <MDIO_u8SetPinDirection+0x1d2>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <MDIO_u8SetPinDirection+0x1ce>
     ebc:	84 2b       	or	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	b4 c0       	rjmp	.+360    	; 0x102a <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	88 23       	and	r24, r24
     ec6:	a1 f4       	brne	.+40     	; 0xef0 <MDIO_u8SetPinDirection+0x20a>
			{
				/*Set DDRC Pin in DDRC Reg*/
				SET_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
     ec8:	a4 e3       	ldi	r26, 0x34	; 52
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e4 e3       	ldi	r30, 0x34	; 52
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <MDIO_u8SetPinDirection+0x200>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <MDIO_u8SetPinDirection+0x1fc>
     eea:	84 2b       	or	r24, r20
     eec:	8c 93       	st	X, r24
     eee:	9d c0       	rjmp	.+314    	; 0x102a <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
     ef0:	8c 81       	ldd	r24, Y+4	; 0x04
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	a9 f4       	brne	.+42     	; 0xf20 <MDIO_u8SetPinDirection+0x23a>
			{
				/*Clear DDRC Pin in DDRC Reg*/
				CLEAR_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
     ef6:	a4 e3       	ldi	r26, 0x34	; 52
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e4 e3       	ldi	r30, 0x34	; 52
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <MDIO_u8SetPinDirection+0x22e>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <MDIO_u8SetPinDirection+0x22a>
     f18:	80 95       	com	r24
     f1a:	84 23       	and	r24, r20
     f1c:	8c 93       	st	X, r24
     f1e:	85 c0       	rjmp	.+266    	; 0x102a <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
     f20:	8c 81       	ldd	r24, Y+4	; 0x04
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	09 f0       	breq	.+2      	; 0xf28 <MDIO_u8SetPinDirection+0x242>
     f26:	81 c0       	rjmp	.+258    	; 0x102a <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRC Pin in DDRC Reg*/
				CLEAR_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
     f28:	a4 e3       	ldi	r26, 0x34	; 52
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e4 e3       	ldi	r30, 0x34	; 52
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <MDIO_u8SetPinDirection+0x25e>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	2a 95       	dec	r18
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <MDIO_u8SetPinDirection+0x25a>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
				/*Set PORTC Pin in DDRC Reg*/
				SET_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
     f4e:	a5 e3       	ldi	r26, 0x35	; 53
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e5 e3       	ldi	r30, 0x35	; 53
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 2e       	mov	r0, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <MDIO_u8SetPinDirection+0x286>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <MDIO_u8SetPinDirection+0x282>
     f70:	84 2b       	or	r24, r20
     f72:	8c 93       	st	X, r24
     f74:	5a c0       	rjmp	.+180    	; 0x102a <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	88 23       	and	r24, r24
     f7a:	a1 f4       	brne	.+40     	; 0xfa4 <MDIO_u8SetPinDirection+0x2be>
			{
				/*Set DDRD Pin in DDRD Reg*/
				SET_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
     f7c:	a1 e3       	ldi	r26, 0x31	; 49
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e1 e3       	ldi	r30, 0x31	; 49
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <MDIO_u8SetPinDirection+0x2b4>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <MDIO_u8SetPinDirection+0x2b0>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	43 c0       	rjmp	.+134    	; 0x102a <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	a9 f4       	brne	.+42     	; 0xfd4 <MDIO_u8SetPinDirection+0x2ee>
			{
				/*Clear DDRD Pin in DDRD Reg*/
				CLEAR_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
     faa:	a1 e3       	ldi	r26, 0x31	; 49
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e1 e3       	ldi	r30, 0x31	; 49
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <MDIO_u8SetPinDirection+0x2e2>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <MDIO_u8SetPinDirection+0x2de>
     fcc:	80 95       	com	r24
     fce:	84 23       	and	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	2b c0       	rjmp	.+86     	; 0x102a <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	82 30       	cpi	r24, 0x02	; 2
     fd8:	41 f5       	brne	.+80     	; 0x102a <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRD Pin in DDRD Reg*/
				CLEAR_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
     fda:	a1 e3       	ldi	r26, 0x31	; 49
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e1 e3       	ldi	r30, 0x31	; 49
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <MDIO_u8SetPinDirection+0x310>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	2a 95       	dec	r18
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <MDIO_u8SetPinDirection+0x30c>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
				/*Set PORTD Pin in DDRD Reg*/
				SET_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
    1000:	a2 e3       	ldi	r26, 0x32	; 50
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e2 e3       	ldi	r30, 0x32	; 50
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <MDIO_u8SetPinDirection+0x338>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <MDIO_u8SetPinDirection+0x334>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	01 c0       	rjmp	.+2      	; 0x102a <MDIO_u8SetPinDirection+0x344>
			break;
		}
	}
	else
	{
		Local_u8ErrorSate = STD_TYPE_NOK;
    1028:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorSate;
    102a:	89 81       	ldd	r24, Y+1	; 0x01
}
    102c:	26 96       	adiw	r28, 0x06	; 6
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <MDIO_u8SetPortDirection>:

/* Set Port Direction */
u8 MDIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirec)
{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <MDIO_u8SetPortDirection+0x6>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <MDIO_u8SetPortDirection+0x8>
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	8a 83       	std	Y+2, r24	; 0x02
    104e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorSate = STD_TYPE_OK;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId <= MDIO_PORTD) && (Copy_u8PortDirec <= MDIO_INPUT_PULLED_UP))
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	84 30       	cpi	r24, 0x04	; 4
    1058:	08 f0       	brcs	.+2      	; 0x105c <MDIO_u8SetPortDirection+0x1e>
    105a:	90 c0       	rjmp	.+288    	; 0x117c <MDIO_u8SetPortDirection+0x13e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	83 30       	cpi	r24, 0x03	; 3
    1060:	08 f0       	brcs	.+2      	; 0x1064 <MDIO_u8SetPortDirection+0x26>
    1062:	8c c0       	rjmp	.+280    	; 0x117c <MDIO_u8SetPortDirection+0x13e>
	{
		switch (Copy_u8PortId)
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3d 83       	std	Y+5, r19	; 0x05
    106c:	2c 83       	std	Y+4, r18	; 0x04
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	9d 81       	ldd	r25, Y+5	; 0x05
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	89 f1       	breq	.+98     	; 0x10da <MDIO_u8SetPortDirection+0x9c>
    1078:	2c 81       	ldd	r18, Y+4	; 0x04
    107a:	3d 81       	ldd	r19, Y+5	; 0x05
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	2c f4       	brge	.+10     	; 0x108c <MDIO_u8SetPortDirection+0x4e>
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	69 f0       	breq	.+26     	; 0x10a4 <MDIO_u8SetPortDirection+0x66>
    108a:	76 c0       	rjmp	.+236    	; 0x1178 <MDIO_u8SetPortDirection+0x13a>
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	e9 f1       	breq	.+122    	; 0x1110 <MDIO_u8SetPortDirection+0xd2>
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	9d 81       	ldd	r25, Y+5	; 0x05
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	91 05       	cpc	r25, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <MDIO_u8SetPortDirection+0x64>
    10a0:	51 c0       	rjmp	.+162    	; 0x1144 <MDIO_u8SetPortDirection+0x106>
    10a2:	6a c0       	rjmp	.+212    	; 0x1178 <MDIO_u8SetPortDirection+0x13a>
		{
		case MDIO_PORTA:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 23       	and	r24, r24
    10a8:	29 f4       	brne	.+10     	; 0x10b4 <MDIO_u8SetPortDirection+0x76>
			{
				/* Set all Port A pins as Output */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_OUTPUT;
    10aa:	ea e3       	ldi	r30, 0x3A	; 58
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	80 83       	st	Z, r24
    10b2:	65 c0       	rjmp	.+202    	; 0x117e <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	21 f4       	brne	.+8      	; 0x10c2 <MDIO_u8SetPortDirection+0x84>
			{
				/* Set all Port A pins as Input (Floating) */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    10ba:	ea e3       	ldi	r30, 0x3A	; 58
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	10 82       	st	Z, r1
    10c0:	5e c0       	rjmp	.+188    	; 0x117e <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	09 f0       	breq	.+2      	; 0x10ca <MDIO_u8SetPortDirection+0x8c>
    10c8:	5a c0       	rjmp	.+180    	; 0x117e <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port A pins as Input (Pulled-Up) */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    10ca:	ea e3       	ldi	r30, 0x3A	; 58
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port A pins */
				PRIVATE_PORTA_REG = PRIVATE_ALL_PORT_OUTPUT;
    10d0:	eb e3       	ldi	r30, 0x3B	; 59
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	8f ef       	ldi	r24, 0xFF	; 255
    10d6:	80 83       	st	Z, r24
    10d8:	52 c0       	rjmp	.+164    	; 0x117e <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 23       	and	r24, r24
    10de:	29 f4       	brne	.+10     	; 0x10ea <MDIO_u8SetPortDirection+0xac>
			{
				/* Set all Port B pins as Output */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_OUTPUT;
    10e0:	e7 e3       	ldi	r30, 0x37	; 55
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	8f ef       	ldi	r24, 0xFF	; 255
    10e6:	80 83       	st	Z, r24
    10e8:	4a c0       	rjmp	.+148    	; 0x117e <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	21 f4       	brne	.+8      	; 0x10f8 <MDIO_u8SetPortDirection+0xba>
			{
				/* Set all Port B pins as Input (Floating) */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    10f0:	e7 e3       	ldi	r30, 0x37	; 55
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	10 82       	st	Z, r1
    10f6:	43 c0       	rjmp	.+134    	; 0x117e <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	82 30       	cpi	r24, 0x02	; 2
    10fc:	09 f0       	breq	.+2      	; 0x1100 <MDIO_u8SetPortDirection+0xc2>
    10fe:	3f c0       	rjmp	.+126    	; 0x117e <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port B pins as Input (Pulled-Up) */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    1100:	e7 e3       	ldi	r30, 0x37	; 55
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port B pins */
				PRIVATE_PORTB_REG = PRIVATE_ALL_PORT_OUTPUT;
    1106:	e8 e3       	ldi	r30, 0x38	; 56
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	8f ef       	ldi	r24, 0xFF	; 255
    110c:	80 83       	st	Z, r24
    110e:	37 c0       	rjmp	.+110    	; 0x117e <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	88 23       	and	r24, r24
    1114:	29 f4       	brne	.+10     	; 0x1120 <MDIO_u8SetPortDirection+0xe2>
			{
				/* Set all Port C pins as Output */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_OUTPUT;
    1116:	e4 e3       	ldi	r30, 0x34	; 52
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	8f ef       	ldi	r24, 0xFF	; 255
    111c:	80 83       	st	Z, r24
    111e:	2f c0       	rjmp	.+94     	; 0x117e <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	21 f4       	brne	.+8      	; 0x112e <MDIO_u8SetPortDirection+0xf0>
			{
				/* Set all Port C pins as Input (Floating) */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    1126:	e4 e3       	ldi	r30, 0x34	; 52
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	10 82       	st	Z, r1
    112c:	28 c0       	rjmp	.+80     	; 0x117e <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	82 30       	cpi	r24, 0x02	; 2
    1132:	29 f5       	brne	.+74     	; 0x117e <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port C pins as Input (Pulled-Up) */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    1134:	e4 e3       	ldi	r30, 0x34	; 52
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port C pins */
				PRIVATE_PORTC_REG = PRIVATE_ALL_PORT_OUTPUT;
    113a:	e5 e3       	ldi	r30, 0x35	; 53
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	80 83       	st	Z, r24
    1142:	1d c0       	rjmp	.+58     	; 0x117e <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	88 23       	and	r24, r24
    1148:	29 f4       	brne	.+10     	; 0x1154 <MDIO_u8SetPortDirection+0x116>
			{
				/* Set all Port D pins as Output */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_OUTPUT;
    114a:	e1 e3       	ldi	r30, 0x31	; 49
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	80 83       	st	Z, r24
    1152:	15 c0       	rjmp	.+42     	; 0x117e <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	21 f4       	brne	.+8      	; 0x1162 <MDIO_u8SetPortDirection+0x124>
			{
				/* Set all Port D pins as Input (Floating) */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    115a:	e1 e3       	ldi	r30, 0x31	; 49
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	10 82       	st	Z, r1
    1160:	0e c0       	rjmp	.+28     	; 0x117e <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	59 f4       	brne	.+22     	; 0x117e <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port D pins as Input (Pulled-Up) */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    1168:	e1 e3       	ldi	r30, 0x31	; 49
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port D pins */
				PRIVATE_PORTD_REG = PRIVATE_ALL_PORT_OUTPUT;
    116e:	e2 e3       	ldi	r30, 0x32	; 50
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	80 83       	st	Z, r24
    1176:	03 c0       	rjmp	.+6      	; 0x117e <MDIO_u8SetPortDirection+0x140>
			}
			break;
		default:
			Local_u8ErrorSate = STD_TYPE_NOK;
    1178:	19 82       	std	Y+1, r1	; 0x01
    117a:	01 c0       	rjmp	.+2      	; 0x117e <MDIO_u8SetPortDirection+0x140>
			break;
		}
	}
	else
	{
		Local_u8ErrorSate = STD_TYPE_NOK;
    117c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorSate;
    117e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <MDIO_u8SetPinValue>:
/* Set Pin Value */
u8 MDIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <MDIO_u8SetPinValue+0x6>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <MDIO_u8SetPinValue+0x8>
    1198:	00 d0       	rcall	.+0      	; 0x119a <MDIO_u8SetPinValue+0xa>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	8a 83       	std	Y+2, r24	; 0x02
    11a0:	6b 83       	std	Y+3, r22	; 0x03
    11a2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= MDIO_PORTD && Copy_u8PinId <= MDIO_PIN_7 && Copy_u8PinValue <= MDIO_HIGH)
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	84 30       	cpi	r24, 0x04	; 4
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <MDIO_u8SetPinValue+0x20>
    11ae:	eb c0       	rjmp	.+470    	; 0x1386 <MDIO_u8SetPinValue+0x1f6>
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	88 30       	cpi	r24, 0x08	; 8
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <MDIO_u8SetPinValue+0x28>
    11b6:	e7 c0       	rjmp	.+462    	; 0x1386 <MDIO_u8SetPinValue+0x1f6>
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <MDIO_u8SetPinValue+0x30>
    11be:	e3 c0       	rjmp	.+454    	; 0x1386 <MDIO_u8SetPinValue+0x1f6>
	{
		/* Set Pin Value */
		switch (Copy_u8PortId)
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	3e 83       	std	Y+6, r19	; 0x06
    11c8:	2d 83       	std	Y+5, r18	; 0x05
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	91 05       	cpc	r25, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <MDIO_u8SetPinValue+0x46>
    11d4:	47 c0       	rjmp	.+142    	; 0x1264 <MDIO_u8SetPinValue+0xd4>
    11d6:	2d 81       	ldd	r18, Y+5	; 0x05
    11d8:	3e 81       	ldd	r19, Y+6	; 0x06
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	2c f4       	brge	.+10     	; 0x11ea <MDIO_u8SetPinValue+0x5a>
    11e0:	8d 81       	ldd	r24, Y+5	; 0x05
    11e2:	9e 81       	ldd	r25, Y+6	; 0x06
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	71 f0       	breq	.+28     	; 0x1204 <MDIO_u8SetPinValue+0x74>
    11e8:	cc c0       	rjmp	.+408    	; 0x1382 <MDIO_u8SetPinValue+0x1f2>
    11ea:	2d 81       	ldd	r18, Y+5	; 0x05
    11ec:	3e 81       	ldd	r19, Y+6	; 0x06
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <MDIO_u8SetPinValue+0x66>
    11f4:	67 c0       	rjmp	.+206    	; 0x12c4 <MDIO_u8SetPinValue+0x134>
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	9e 81       	ldd	r25, Y+6	; 0x06
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <MDIO_u8SetPinValue+0x72>
    1200:	91 c0       	rjmp	.+290    	; 0x1324 <MDIO_u8SetPinValue+0x194>
    1202:	bf c0       	rjmp	.+382    	; 0x1382 <MDIO_u8SetPinValue+0x1f2>
		{
		case MDIO_PORTA:
			if (Copy_u8PinValue == MDIO_HIGH)
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	a1 f4       	brne	.+40     	; 0x1232 <MDIO_u8SetPinValue+0xa2>
			{
				/* Set PORTA Pin in PORTA Reg */
				SET_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
    120a:	ab e3       	ldi	r26, 0x3B	; 59
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e3       	ldi	r30, 0x3B	; 59
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <MDIO_u8SetPinValue+0x98>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <MDIO_u8SetPinValue+0x94>
    122c:	84 2b       	or	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	ab c0       	rjmp	.+342    	; 0x1388 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	88 23       	and	r24, r24
    1236:	09 f0       	breq	.+2      	; 0x123a <MDIO_u8SetPinValue+0xaa>
    1238:	a7 c0       	rjmp	.+334    	; 0x1388 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTA Pin in PORTA Reg */
				CLEAR_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
    123a:	ab e3       	ldi	r26, 0x3B	; 59
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	eb e3       	ldi	r30, 0x3B	; 59
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <MDIO_u8SetPinValue+0xc8>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <MDIO_u8SetPinValue+0xc4>
    125c:	80 95       	com	r24
    125e:	84 23       	and	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	92 c0       	rjmp	.+292    	; 0x1388 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinValue == MDIO_HIGH)
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	a1 f4       	brne	.+40     	; 0x1292 <MDIO_u8SetPinValue+0x102>
			{
				/* Set PORTB Pin in PORTB Reg */
				SET_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
    126a:	a8 e3       	ldi	r26, 0x38	; 56
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e8 e3       	ldi	r30, 0x38	; 56
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <MDIO_u8SetPinValue+0xf8>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <MDIO_u8SetPinValue+0xf4>
    128c:	84 2b       	or	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	7b c0       	rjmp	.+246    	; 0x1388 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	88 23       	and	r24, r24
    1296:	09 f0       	breq	.+2      	; 0x129a <MDIO_u8SetPinValue+0x10a>
    1298:	77 c0       	rjmp	.+238    	; 0x1388 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTB Pin in PORTB Reg */
				CLEAR_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
    129a:	a8 e3       	ldi	r26, 0x38	; 56
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e8 e3       	ldi	r30, 0x38	; 56
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <MDIO_u8SetPinValue+0x128>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <MDIO_u8SetPinValue+0x124>
    12bc:	80 95       	com	r24
    12be:	84 23       	and	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	62 c0       	rjmp	.+196    	; 0x1388 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinValue == MDIO_HIGH)
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	a1 f4       	brne	.+40     	; 0x12f2 <MDIO_u8SetPinValue+0x162>
			{
				/* Set PORTC Pin in PORTC Reg */
				SET_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
    12ca:	a5 e3       	ldi	r26, 0x35	; 53
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e5 e3       	ldi	r30, 0x35	; 53
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <MDIO_u8SetPinValue+0x158>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <MDIO_u8SetPinValue+0x154>
    12ec:	84 2b       	or	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	4b c0       	rjmp	.+150    	; 0x1388 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	88 23       	and	r24, r24
    12f6:	09 f0       	breq	.+2      	; 0x12fa <MDIO_u8SetPinValue+0x16a>
    12f8:	47 c0       	rjmp	.+142    	; 0x1388 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTC Pin in PORTC Reg */
				CLEAR_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
    12fa:	a5 e3       	ldi	r26, 0x35	; 53
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e5 e3       	ldi	r30, 0x35	; 53
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <MDIO_u8SetPinValue+0x188>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <MDIO_u8SetPinValue+0x184>
    131c:	80 95       	com	r24
    131e:	84 23       	and	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	32 c0       	rjmp	.+100    	; 0x1388 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinValue == MDIO_HIGH)
    1324:	8c 81       	ldd	r24, Y+4	; 0x04
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	a1 f4       	brne	.+40     	; 0x1352 <MDIO_u8SetPinValue+0x1c2>
			{
				/* Set PORTD Pin in PORTD Reg */
				SET_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
    132a:	a2 e3       	ldi	r26, 0x32	; 50
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e2 e3       	ldi	r30, 0x32	; 50
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <MDIO_u8SetPinValue+0x1b8>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <MDIO_u8SetPinValue+0x1b4>
    134c:	84 2b       	or	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	1b c0       	rjmp	.+54     	; 0x1388 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	88 23       	and	r24, r24
    1356:	c1 f4       	brne	.+48     	; 0x1388 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTD Pin in PORTD Reg */
				CLEAR_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
    1358:	a2 e3       	ldi	r26, 0x32	; 50
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e2 e3       	ldi	r30, 0x32	; 50
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <MDIO_u8SetPinValue+0x1e6>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <MDIO_u8SetPinValue+0x1e2>
    137a:	80 95       	com	r24
    137c:	84 23       	and	r24, r20
    137e:	8c 93       	st	X, r24
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
    1382:	19 82       	std	Y+1, r1	; 0x01
    1384:	01 c0       	rjmp	.+2      	; 0x1388 <MDIO_u8SetPinValue+0x1f8>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK;
    1386:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1388:	89 81       	ldd	r24, Y+1	; 0x01
}
    138a:	26 96       	adiw	r28, 0x06	; 6
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <MDIO_u8SetPortValue>:

/* Set Port Value */
u8 MDIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <MDIO_u8SetPortValue+0x6>
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <MDIO_u8SetPortValue+0x8>
    13a4:	0f 92       	push	r0
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	8a 83       	std	Y+2, r24	; 0x02
    13ac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <= MDIO_PORTD)
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	84 30       	cpi	r24, 0x04	; 4
    13b6:	98 f5       	brcc	.+102    	; 0x141e <MDIO_u8SetPortValue+0x82>
	{
		switch (Copy_u8PortId)
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3d 83       	std	Y+5, r19	; 0x05
    13c0:	2c 83       	std	Y+4, r18	; 0x04
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9d 81       	ldd	r25, Y+5	; 0x05
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	91 05       	cpc	r25, r1
    13ca:	d1 f0       	breq	.+52     	; 0x1400 <MDIO_u8SetPortValue+0x64>
    13cc:	2c 81       	ldd	r18, Y+4	; 0x04
    13ce:	3d 81       	ldd	r19, Y+5	; 0x05
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <MDIO_u8SetPortValue+0x44>
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	61 f0       	breq	.+24     	; 0x13f6 <MDIO_u8SetPortValue+0x5a>
    13de:	20 c0       	rjmp	.+64     	; 0x1420 <MDIO_u8SetPortValue+0x84>
    13e0:	2c 81       	ldd	r18, Y+4	; 0x04
    13e2:	3d 81       	ldd	r19, Y+5	; 0x05
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	31 05       	cpc	r19, r1
    13e8:	81 f0       	breq	.+32     	; 0x140a <MDIO_u8SetPortValue+0x6e>
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	83 30       	cpi	r24, 0x03	; 3
    13f0:	91 05       	cpc	r25, r1
    13f2:	81 f0       	breq	.+32     	; 0x1414 <MDIO_u8SetPortValue+0x78>
    13f4:	15 c0       	rjmp	.+42     	; 0x1420 <MDIO_u8SetPortValue+0x84>
		{
		case MDIO_PORTA: PRIVATE_PORTA_REG = Copy_u8PortValue; break;
    13f6:	eb e3       	ldi	r30, 0x3B	; 59
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	80 83       	st	Z, r24
    13fe:	10 c0       	rjmp	.+32     	; 0x1420 <MDIO_u8SetPortValue+0x84>
		case MDIO_PORTB: PRIVATE_PORTB_REG = Copy_u8PortValue; break;
    1400:	e8 e3       	ldi	r30, 0x38	; 56
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	80 83       	st	Z, r24
    1408:	0b c0       	rjmp	.+22     	; 0x1420 <MDIO_u8SetPortValue+0x84>
		case MDIO_PORTC: PRIVATE_PORTC_REG = Copy_u8PortValue; break;
    140a:	e5 e3       	ldi	r30, 0x35	; 53
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	80 83       	st	Z, r24
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <MDIO_u8SetPortValue+0x84>
		case MDIO_PORTD: PRIVATE_PORTD_REG = Copy_u8PortValue; break;
    1414:	e2 e3       	ldi	r30, 0x32	; 50
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	80 83       	st	Z, r24
    141c:	01 c0       	rjmp	.+2      	; 0x1420 <MDIO_u8SetPortValue+0x84>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK;
    141e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1420:	89 81       	ldd	r24, Y+1	; 0x01
}
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <MDIO_u8GetPinValue>:

/* Get Pin Value */
u8 MDIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	27 97       	sbiw	r28, 0x07	; 7
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	8a 83       	std	Y+2, r24	; 0x02
    1448:	6b 83       	std	Y+3, r22	; 0x03
    144a:	5d 83       	std	Y+5, r21	; 0x05
    144c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPE_OK; // Initialize error state to OK
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	89 83       	std	Y+1, r24	; 0x01

	// Check if the port ID, pin ID are within valid ranges and pointer is not NULL
	if (Copy_u8PortId <= MDIO_PORTD && Copy_u8PinId <= MDIO_PIN_7 && Copy_pu8ReturnedPinValue != POINTER_NULL)
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	84 30       	cpi	r24, 0x04	; 4
    1456:	08 f0       	brcs	.+2      	; 0x145a <MDIO_u8GetPinValue+0x28>
    1458:	7c c0       	rjmp	.+248    	; 0x1552 <MDIO_u8GetPinValue+0x120>
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	88 30       	cpi	r24, 0x08	; 8
    145e:	08 f0       	brcs	.+2      	; 0x1462 <MDIO_u8GetPinValue+0x30>
    1460:	78 c0       	rjmp	.+240    	; 0x1552 <MDIO_u8GetPinValue+0x120>
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	9d 81       	ldd	r25, Y+5	; 0x05
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	09 f4       	brne	.+2      	; 0x146c <MDIO_u8GetPinValue+0x3a>
    146a:	73 c0       	rjmp	.+230    	; 0x1552 <MDIO_u8GetPinValue+0x120>
	{
		// Retrieve the value from the correct port
		switch (Copy_u8PortId)
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	3f 83       	std	Y+7, r19	; 0x07
    1474:	2e 83       	std	Y+6, r18	; 0x06
    1476:	4e 81       	ldd	r20, Y+6	; 0x06
    1478:	5f 81       	ldd	r21, Y+7	; 0x07
    147a:	41 30       	cpi	r20, 0x01	; 1
    147c:	51 05       	cpc	r21, r1
    147e:	59 f1       	breq	.+86     	; 0x14d6 <MDIO_u8GetPinValue+0xa4>
    1480:	8e 81       	ldd	r24, Y+6	; 0x06
    1482:	9f 81       	ldd	r25, Y+7	; 0x07
    1484:	82 30       	cpi	r24, 0x02	; 2
    1486:	91 05       	cpc	r25, r1
    1488:	34 f4       	brge	.+12     	; 0x1496 <MDIO_u8GetPinValue+0x64>
    148a:	2e 81       	ldd	r18, Y+6	; 0x06
    148c:	3f 81       	ldd	r19, Y+7	; 0x07
    148e:	21 15       	cp	r18, r1
    1490:	31 05       	cpc	r19, r1
    1492:	69 f0       	breq	.+26     	; 0x14ae <MDIO_u8GetPinValue+0x7c>
    1494:	5c c0       	rjmp	.+184    	; 0x154e <MDIO_u8GetPinValue+0x11c>
    1496:	4e 81       	ldd	r20, Y+6	; 0x06
    1498:	5f 81       	ldd	r21, Y+7	; 0x07
    149a:	42 30       	cpi	r20, 0x02	; 2
    149c:	51 05       	cpc	r21, r1
    149e:	79 f1       	breq	.+94     	; 0x14fe <MDIO_u8GetPinValue+0xcc>
    14a0:	8e 81       	ldd	r24, Y+6	; 0x06
    14a2:	9f 81       	ldd	r25, Y+7	; 0x07
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <MDIO_u8GetPinValue+0x7a>
    14aa:	3d c0       	rjmp	.+122    	; 0x1526 <MDIO_u8GetPinValue+0xf4>
    14ac:	50 c0       	rjmp	.+160    	; 0x154e <MDIO_u8GetPinValue+0x11c>
		{
		case MDIO_PORTA:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINA_REG, Copy_u8PinId); // Get specific pin value from PORTA
    14ae:	e9 e3       	ldi	r30, 0x39	; 57
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a9 01       	movw	r20, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <MDIO_u8GetPinValue+0x94>
    14c2:	55 95       	asr	r21
    14c4:	47 95       	ror	r20
    14c6:	8a 95       	dec	r24
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <MDIO_u8GetPinValue+0x90>
    14ca:	ca 01       	movw	r24, r20
    14cc:	81 70       	andi	r24, 0x01	; 1
    14ce:	ec 81       	ldd	r30, Y+4	; 0x04
    14d0:	fd 81       	ldd	r31, Y+5	; 0x05
    14d2:	80 83       	st	Z, r24
    14d4:	3f c0       	rjmp	.+126    	; 0x1554 <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTB:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINB_REG, Copy_u8PinId); // Get specific pin value from PORTB
    14d6:	e6 e3       	ldi	r30, 0x36	; 54
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	88 2f       	mov	r24, r24
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	a9 01       	movw	r20, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <MDIO_u8GetPinValue+0xbc>
    14ea:	55 95       	asr	r21
    14ec:	47 95       	ror	r20
    14ee:	8a 95       	dec	r24
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <MDIO_u8GetPinValue+0xb8>
    14f2:	ca 01       	movw	r24, r20
    14f4:	81 70       	andi	r24, 0x01	; 1
    14f6:	ec 81       	ldd	r30, Y+4	; 0x04
    14f8:	fd 81       	ldd	r31, Y+5	; 0x05
    14fa:	80 83       	st	Z, r24
    14fc:	2b c0       	rjmp	.+86     	; 0x1554 <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTC:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINC_REG, Copy_u8PinId); // Get specific pin value from PORTC
    14fe:	e3 e3       	ldi	r30, 0x33	; 51
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a9 01       	movw	r20, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <MDIO_u8GetPinValue+0xe4>
    1512:	55 95       	asr	r21
    1514:	47 95       	ror	r20
    1516:	8a 95       	dec	r24
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <MDIO_u8GetPinValue+0xe0>
    151a:	ca 01       	movw	r24, r20
    151c:	81 70       	andi	r24, 0x01	; 1
    151e:	ec 81       	ldd	r30, Y+4	; 0x04
    1520:	fd 81       	ldd	r31, Y+5	; 0x05
    1522:	80 83       	st	Z, r24
    1524:	17 c0       	rjmp	.+46     	; 0x1554 <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTD:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PIND_REG, Copy_u8PinId); // Get specific pin value from PORTD
    1526:	e0 e3       	ldi	r30, 0x30	; 48
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a9 01       	movw	r20, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <MDIO_u8GetPinValue+0x10c>
    153a:	55 95       	asr	r21
    153c:	47 95       	ror	r20
    153e:	8a 95       	dec	r24
    1540:	e2 f7       	brpl	.-8      	; 0x153a <MDIO_u8GetPinValue+0x108>
    1542:	ca 01       	movw	r24, r20
    1544:	81 70       	andi	r24, 0x01	; 1
    1546:	ec 81       	ldd	r30, Y+4	; 0x04
    1548:	fd 81       	ldd	r31, Y+5	; 0x05
    154a:	80 83       	st	Z, r24
    154c:	03 c0       	rjmp	.+6      	; 0x1554 <MDIO_u8GetPinValue+0x122>
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK; // Set error state to NOK if port ID is invalid
    154e:	19 82       	std	Y+1, r1	; 0x01
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <MDIO_u8GetPinValue+0x122>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK; // Set error state to NOK if input parameters are invalid
    1552:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState; // Return the error state
    1554:	89 81       	ldd	r24, Y+1	; 0x01
}
    1556:	27 96       	adiw	r28, 0x07	; 7
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <MDIO_u8GetPortValue>:

/* Get Port Value */
u8 MDIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <MDIO_u8GetPortValue+0x6>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <MDIO_u8GetPortValue+0x8>
    1570:	00 d0       	rcall	.+0      	; 0x1572 <MDIO_u8GetPortValue+0xa>
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	7c 83       	std	Y+4, r23	; 0x04
    157a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= MDIO_PORTD && Copy_pu8ReturnedPortValue != POINTER_NULL)
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	84 30       	cpi	r24, 0x04	; 4
    1584:	08 f0       	brcs	.+2      	; 0x1588 <MDIO_u8GetPortValue+0x20>
    1586:	40 c0       	rjmp	.+128    	; 0x1608 <MDIO_u8GetPortValue+0xa0>
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	e1 f1       	breq	.+120    	; 0x1608 <MDIO_u8GetPortValue+0xa0>
	{
		/* Set Pin Value */
		switch (Copy_u8PortId)
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	3e 83       	std	Y+6, r19	; 0x06
    1598:	2d 83       	std	Y+5, r18	; 0x05
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	91 05       	cpc	r25, r1
    15a2:	e1 f0       	breq	.+56     	; 0x15dc <MDIO_u8GetPortValue+0x74>
    15a4:	2d 81       	ldd	r18, Y+5	; 0x05
    15a6:	3e 81       	ldd	r19, Y+6	; 0x06
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <MDIO_u8GetPortValue+0x50>
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	61 f0       	breq	.+24     	; 0x15ce <MDIO_u8GetPortValue+0x66>
    15b6:	27 c0       	rjmp	.+78     	; 0x1606 <MDIO_u8GetPortValue+0x9e>
    15b8:	2d 81       	ldd	r18, Y+5	; 0x05
    15ba:	3e 81       	ldd	r19, Y+6	; 0x06
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	a1 f0       	breq	.+40     	; 0x15ea <MDIO_u8GetPortValue+0x82>
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	83 30       	cpi	r24, 0x03	; 3
    15c8:	91 05       	cpc	r25, r1
    15ca:	b1 f0       	breq	.+44     	; 0x15f8 <MDIO_u8GetPortValue+0x90>
    15cc:	1c c0       	rjmp	.+56     	; 0x1606 <MDIO_u8GetPortValue+0x9e>
		{
		case MDIO_PORTA:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINA_REG;
    15ce:	e9 e3       	ldi	r30, 0x39	; 57
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	eb 81       	ldd	r30, Y+3	; 0x03
    15d6:	fc 81       	ldd	r31, Y+4	; 0x04
    15d8:	80 83       	st	Z, r24
    15da:	16 c0       	rjmp	.+44     	; 0x1608 <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTB:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINB_REG;
    15dc:	e6 e3       	ldi	r30, 0x36	; 54
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	eb 81       	ldd	r30, Y+3	; 0x03
    15e4:	fc 81       	ldd	r31, Y+4	; 0x04
    15e6:	80 83       	st	Z, r24
    15e8:	0f c0       	rjmp	.+30     	; 0x1608 <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTC:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINC_REG;
    15ea:	e3 e3       	ldi	r30, 0x33	; 51
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	eb 81       	ldd	r30, Y+3	; 0x03
    15f2:	fc 81       	ldd	r31, Y+4	; 0x04
    15f4:	80 83       	st	Z, r24
    15f6:	08 c0       	rjmp	.+16     	; 0x1608 <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTD:
			*Copy_pu8ReturnedPortValue = PRIVATE_PIND_REG;
    15f8:	e0 e3       	ldi	r30, 0x30	; 48
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1600:	fc 81       	ldd	r31, Y+4	; 0x04
    1602:	80 83       	st	Z, r24
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <MDIO_u8GetPortValue+0xa0>
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
    1606:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return Local_u8ErrorState;
    1608:	89 81       	ldd	r24, Y+1	; 0x01
}
    160a:	26 96       	adiw	r28, 0x06	; 6
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <HLCD_VoidLcdIint>:
#include "HLCD_config.h"
#include "HLCD_interface.h"


void HLCD_VoidLcdIint(void)
{
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	cc 54       	subi	r28, 0x4C	; 76
    162a:	d0 40       	sbci	r29, 0x00	; 0
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	fe 01       	movw	r30, r28
    1638:	e7 5b       	subi	r30, 0xB7	; 183
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a8 ef       	ldi	r26, 0xF8	; 248
    1642:	b1 e4       	ldi	r27, 0x41	; 65
    1644:	80 83       	st	Z, r24
    1646:	91 83       	std	Z+1, r25	; 0x01
    1648:	a2 83       	std	Z+2, r26	; 0x02
    164a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164c:	8e 01       	movw	r16, r28
    164e:	0b 5b       	subi	r16, 0xBB	; 187
    1650:	1f 4f       	sbci	r17, 0xFF	; 255
    1652:	fe 01       	movw	r30, r28
    1654:	e7 5b       	subi	r30, 0xB7	; 183
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	60 81       	ld	r22, Z
    165a:	71 81       	ldd	r23, Z+1	; 0x01
    165c:	82 81       	ldd	r24, Z+2	; 0x02
    165e:	93 81       	ldd	r25, Z+3	; 0x03
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	4a ef       	ldi	r20, 0xFA	; 250
    1666:	54 e4       	ldi	r21, 0x44	; 68
    1668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	f8 01       	movw	r30, r16
    1672:	80 83       	st	Z, r24
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	a2 83       	std	Z+2, r26	; 0x02
    1678:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    167a:	fe 01       	movw	r30, r28
    167c:	eb 5b       	subi	r30, 0xBB	; 187
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	60 81       	ld	r22, Z
    1682:	71 81       	ldd	r23, Z+1	; 0x01
    1684:	82 81       	ldd	r24, Z+2	; 0x02
    1686:	93 81       	ldd	r25, Z+3	; 0x03
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e8       	ldi	r20, 0x80	; 128
    168e:	5f e3       	ldi	r21, 0x3F	; 63
    1690:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1694:	88 23       	and	r24, r24
    1696:	44 f4       	brge	.+16     	; 0x16a8 <HLCD_VoidLcdIint+0x8c>
		__ticks = 1;
    1698:	fe 01       	movw	r30, r28
    169a:	ed 5b       	subi	r30, 0xBD	; 189
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	80 83       	st	Z, r24
    16a6:	64 c0       	rjmp	.+200    	; 0x1770 <HLCD_VoidLcdIint+0x154>
	else if (__tmp > 65535)
    16a8:	fe 01       	movw	r30, r28
    16aa:	eb 5b       	subi	r30, 0xBB	; 187
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
    16b2:	82 81       	ldd	r24, Z+2	; 0x02
    16b4:	93 81       	ldd	r25, Z+3	; 0x03
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	3f ef       	ldi	r19, 0xFF	; 255
    16ba:	4f e7       	ldi	r20, 0x7F	; 127
    16bc:	57 e4       	ldi	r21, 0x47	; 71
    16be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16c2:	18 16       	cp	r1, r24
    16c4:	0c f0       	brlt	.+2      	; 0x16c8 <HLCD_VoidLcdIint+0xac>
    16c6:	43 c0       	rjmp	.+134    	; 0x174e <HLCD_VoidLcdIint+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c8:	fe 01       	movw	r30, r28
    16ca:	e7 5b       	subi	r30, 0xB7	; 183
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	60 81       	ld	r22, Z
    16d0:	71 81       	ldd	r23, Z+1	; 0x01
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	93 81       	ldd	r25, Z+3	; 0x03
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e2       	ldi	r20, 0x20	; 32
    16dc:	51 e4       	ldi	r21, 0x41	; 65
    16de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	8e 01       	movw	r16, r28
    16e8:	0d 5b       	subi	r16, 0xBD	; 189
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	f8 01       	movw	r30, r16
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	80 83       	st	Z, r24
    16fe:	1f c0       	rjmp	.+62     	; 0x173e <HLCD_VoidLcdIint+0x122>
    1700:	fe 01       	movw	r30, r28
    1702:	ef 5b       	subi	r30, 0xBF	; 191
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	88 ec       	ldi	r24, 0xC8	; 200
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	91 83       	std	Z+1, r25	; 0x01
    170c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    170e:	fe 01       	movw	r30, r28
    1710:	ef 5b       	subi	r30, 0xBF	; 191
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 81       	ld	r24, Z
    1716:	91 81       	ldd	r25, Z+1	; 0x01
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <HLCD_VoidLcdIint+0xfc>
    171c:	fe 01       	movw	r30, r28
    171e:	ef 5b       	subi	r30, 0xBF	; 191
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1726:	de 01       	movw	r26, r28
    1728:	ad 5b       	subi	r26, 0xBD	; 189
    172a:	bf 4f       	sbci	r27, 0xFF	; 255
    172c:	fe 01       	movw	r30, r28
    172e:	ed 5b       	subi	r30, 0xBD	; 189
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	80 81       	ld	r24, Z
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	11 96       	adiw	r26, 0x01	; 1
    173a:	9c 93       	st	X, r25
    173c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173e:	fe 01       	movw	r30, r28
    1740:	ed 5b       	subi	r30, 0xBD	; 189
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	d1 f6       	brne	.-76     	; 0x1700 <HLCD_VoidLcdIint+0xe4>
    174c:	24 c0       	rjmp	.+72     	; 0x1796 <HLCD_VoidLcdIint+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174e:	8e 01       	movw	r16, r28
    1750:	0d 5b       	subi	r16, 0xBD	; 189
    1752:	1f 4f       	sbci	r17, 0xFF	; 255
    1754:	fe 01       	movw	r30, r28
    1756:	eb 5b       	subi	r30, 0xBB	; 187
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	60 81       	ld	r22, Z
    175c:	71 81       	ldd	r23, Z+1	; 0x01
    175e:	82 81       	ldd	r24, Z+2	; 0x02
    1760:	93 81       	ldd	r25, Z+3	; 0x03
    1762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	f8 01       	movw	r30, r16
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	80 83       	st	Z, r24
    1770:	fe 01       	movw	r30, r28
    1772:	ed 5b       	subi	r30, 0xBD	; 189
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
    177a:	fe 01       	movw	r30, r28
    177c:	ff 96       	adiw	r30, 0x3f	; 63
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	80 83       	st	Z, r24
    1782:	fe 01       	movw	r30, r28
    1784:	ff 96       	adiw	r30, 0x3f	; 63
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <HLCD_VoidLcdIint+0x16e>
    178e:	fe 01       	movw	r30, r28
    1790:	ff 96       	adiw	r30, 0x3f	; 63
    1792:	91 83       	std	Z+1, r25	; 0x01
    1794:	80 83       	st	Z, r24
	/* Delay for 32 Ms*/
	_delay_ms(31);

	/* Send The INntialixation Command*/
	HLCD_VoidLcdWriteCmd(0x38);
    1796:	88 e3       	ldi	r24, 0x38	; 56
    1798:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <HLCD_VoidLcdWriteCmd>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a0 e2       	ldi	r26, 0x20	; 32
    17a2:	b2 e4       	ldi	r27, 0x42	; 66
    17a4:	8b af       	std	Y+59, r24	; 0x3b
    17a6:	9c af       	std	Y+60, r25	; 0x3c
    17a8:	ad af       	std	Y+61, r26	; 0x3d
    17aa:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17ac:	6b ad       	ldd	r22, Y+59	; 0x3b
    17ae:	7c ad       	ldd	r23, Y+60	; 0x3c
    17b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    17b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    17b4:	2b ea       	ldi	r18, 0xAB	; 171
    17b6:	3a ea       	ldi	r19, 0xAA	; 170
    17b8:	4a e2       	ldi	r20, 0x2A	; 42
    17ba:	50 e4       	ldi	r21, 0x40	; 64
    17bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	8f ab       	std	Y+55, r24	; 0x37
    17c6:	98 af       	std	Y+56, r25	; 0x38
    17c8:	a9 af       	std	Y+57, r26	; 0x39
    17ca:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    17cc:	6f a9       	ldd	r22, Y+55	; 0x37
    17ce:	78 ad       	ldd	r23, Y+56	; 0x38
    17d0:	89 ad       	ldd	r24, Y+57	; 0x39
    17d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e8       	ldi	r20, 0x80	; 128
    17da:	5f e3       	ldi	r21, 0x3F	; 63
    17dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17e0:	88 23       	and	r24, r24
    17e2:	1c f4       	brge	.+6      	; 0x17ea <HLCD_VoidLcdIint+0x1ce>
		__ticks = 1;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	8e ab       	std	Y+54, r24	; 0x36
    17e8:	91 c0       	rjmp	.+290    	; 0x190c <HLCD_VoidLcdIint+0x2f0>
	else if (__tmp > 255)
    17ea:	6f a9       	ldd	r22, Y+55	; 0x37
    17ec:	78 ad       	ldd	r23, Y+56	; 0x38
    17ee:	89 ad       	ldd	r24, Y+57	; 0x39
    17f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4f e7       	ldi	r20, 0x7F	; 127
    17f8:	53 e4       	ldi	r21, 0x43	; 67
    17fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17fe:	18 16       	cp	r1, r24
    1800:	0c f0       	brlt	.+2      	; 0x1804 <HLCD_VoidLcdIint+0x1e8>
    1802:	7b c0       	rjmp	.+246    	; 0x18fa <HLCD_VoidLcdIint+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1804:	6b ad       	ldd	r22, Y+59	; 0x3b
    1806:	7c ad       	ldd	r23, Y+60	; 0x3c
    1808:	8d ad       	ldd	r24, Y+61	; 0x3d
    180a:	9e ad       	ldd	r25, Y+62	; 0x3e
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	4a e7       	ldi	r20, 0x7A	; 122
    1812:	54 e4       	ldi	r21, 0x44	; 68
    1814:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	8a ab       	std	Y+50, r24	; 0x32
    181e:	9b ab       	std	Y+51, r25	; 0x33
    1820:	ac ab       	std	Y+52, r26	; 0x34
    1822:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1824:	6a a9       	ldd	r22, Y+50	; 0x32
    1826:	7b a9       	ldd	r23, Y+51	; 0x33
    1828:	8c a9       	ldd	r24, Y+52	; 0x34
    182a:	9d a9       	ldd	r25, Y+53	; 0x35
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	4a ef       	ldi	r20, 0xFA	; 250
    1832:	54 e4       	ldi	r21, 0x44	; 68
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	8e a7       	std	Y+46, r24	; 0x2e
    183e:	9f a7       	std	Y+47, r25	; 0x2f
    1840:	a8 ab       	std	Y+48, r26	; 0x30
    1842:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1844:	6e a5       	ldd	r22, Y+46	; 0x2e
    1846:	7f a5       	ldd	r23, Y+47	; 0x2f
    1848:	88 a9       	ldd	r24, Y+48	; 0x30
    184a:	99 a9       	ldd	r25, Y+49	; 0x31
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e8       	ldi	r20, 0x80	; 128
    1852:	5f e3       	ldi	r21, 0x3F	; 63
    1854:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1858:	88 23       	and	r24, r24
    185a:	2c f4       	brge	.+10     	; 0x1866 <HLCD_VoidLcdIint+0x24a>
		__ticks = 1;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9d a7       	std	Y+45, r25	; 0x2d
    1862:	8c a7       	std	Y+44, r24	; 0x2c
    1864:	3f c0       	rjmp	.+126    	; 0x18e4 <HLCD_VoidLcdIint+0x2c8>
	else if (__tmp > 65535)
    1866:	6e a5       	ldd	r22, Y+46	; 0x2e
    1868:	7f a5       	ldd	r23, Y+47	; 0x2f
    186a:	88 a9       	ldd	r24, Y+48	; 0x30
    186c:	99 a9       	ldd	r25, Y+49	; 0x31
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	3f ef       	ldi	r19, 0xFF	; 255
    1872:	4f e7       	ldi	r20, 0x7F	; 127
    1874:	57 e4       	ldi	r21, 0x47	; 71
    1876:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    187a:	18 16       	cp	r1, r24
    187c:	4c f5       	brge	.+82     	; 0x18d0 <HLCD_VoidLcdIint+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187e:	6a a9       	ldd	r22, Y+50	; 0x32
    1880:	7b a9       	ldd	r23, Y+51	; 0x33
    1882:	8c a9       	ldd	r24, Y+52	; 0x34
    1884:	9d a9       	ldd	r25, Y+53	; 0x35
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e2       	ldi	r20, 0x20	; 32
    188c:	51 e4       	ldi	r21, 0x41	; 65
    188e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9d a7       	std	Y+45, r25	; 0x2d
    18a4:	8c a7       	std	Y+44, r24	; 0x2c
    18a6:	0f c0       	rjmp	.+30     	; 0x18c6 <HLCD_VoidLcdIint+0x2aa>
    18a8:	88 ec       	ldi	r24, 0xC8	; 200
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9b a7       	std	Y+43, r25	; 0x2b
    18ae:	8a a7       	std	Y+42, r24	; 0x2a
    18b0:	8a a5       	ldd	r24, Y+42	; 0x2a
    18b2:	9b a5       	ldd	r25, Y+43	; 0x2b
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <HLCD_VoidLcdIint+0x298>
    18b8:	9b a7       	std	Y+43, r25	; 0x2b
    18ba:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18bc:	8c a5       	ldd	r24, Y+44	; 0x2c
    18be:	9d a5       	ldd	r25, Y+45	; 0x2d
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	9d a7       	std	Y+45, r25	; 0x2d
    18c4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    18c8:	9d a5       	ldd	r25, Y+45	; 0x2d
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	69 f7       	brne	.-38     	; 0x18a8 <HLCD_VoidLcdIint+0x28c>
    18ce:	24 c0       	rjmp	.+72     	; 0x1918 <HLCD_VoidLcdIint+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d0:	6e a5       	ldd	r22, Y+46	; 0x2e
    18d2:	7f a5       	ldd	r23, Y+47	; 0x2f
    18d4:	88 a9       	ldd	r24, Y+48	; 0x30
    18d6:	99 a9       	ldd	r25, Y+49	; 0x31
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9d a7       	std	Y+45, r25	; 0x2d
    18e2:	8c a7       	std	Y+44, r24	; 0x2c
    18e4:	8c a5       	ldd	r24, Y+44	; 0x2c
    18e6:	9d a5       	ldd	r25, Y+45	; 0x2d
    18e8:	99 a7       	std	Y+41, r25	; 0x29
    18ea:	88 a7       	std	Y+40, r24	; 0x28
    18ec:	88 a5       	ldd	r24, Y+40	; 0x28
    18ee:	99 a5       	ldd	r25, Y+41	; 0x29
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <HLCD_VoidLcdIint+0x2d4>
    18f4:	99 a7       	std	Y+41, r25	; 0x29
    18f6:	88 a7       	std	Y+40, r24	; 0x28
    18f8:	0f c0       	rjmp	.+30     	; 0x1918 <HLCD_VoidLcdIint+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18fa:	6f a9       	ldd	r22, Y+55	; 0x37
    18fc:	78 ad       	ldd	r23, Y+56	; 0x38
    18fe:	89 ad       	ldd	r24, Y+57	; 0x39
    1900:	9a ad       	ldd	r25, Y+58	; 0x3a
    1902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	8e ab       	std	Y+54, r24	; 0x36
    190c:	8e a9       	ldd	r24, Y+54	; 0x36
    190e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1910:	8f a1       	ldd	r24, Y+39	; 0x27
    1912:	8a 95       	dec	r24
    1914:	f1 f7       	brne	.-4      	; 0x1912 <HLCD_VoidLcdIint+0x2f6>
    1916:	8f a3       	std	Y+39, r24	; 0x27

	/*Delay for 1 Ms*/
	_delay_us(40);

	/* Display ON/OFF Control*/
	HLCD_VoidLcdWriteCmd(0x0f);
    1918:	8f e0       	ldi	r24, 0x0F	; 15
    191a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <HLCD_VoidLcdWriteCmd>
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a0 e2       	ldi	r26, 0x20	; 32
    1924:	b2 e4       	ldi	r27, 0x42	; 66
    1926:	8b a3       	std	Y+35, r24	; 0x23
    1928:	9c a3       	std	Y+36, r25	; 0x24
    192a:	ad a3       	std	Y+37, r26	; 0x25
    192c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    192e:	6b a1       	ldd	r22, Y+35	; 0x23
    1930:	7c a1       	ldd	r23, Y+36	; 0x24
    1932:	8d a1       	ldd	r24, Y+37	; 0x25
    1934:	9e a1       	ldd	r25, Y+38	; 0x26
    1936:	2b ea       	ldi	r18, 0xAB	; 171
    1938:	3a ea       	ldi	r19, 0xAA	; 170
    193a:	4a e2       	ldi	r20, 0x2A	; 42
    193c:	50 e4       	ldi	r21, 0x40	; 64
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	8f 8f       	std	Y+31, r24	; 0x1f
    1948:	98 a3       	std	Y+32, r25	; 0x20
    194a:	a9 a3       	std	Y+33, r26	; 0x21
    194c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    194e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1950:	78 a1       	ldd	r23, Y+32	; 0x20
    1952:	89 a1       	ldd	r24, Y+33	; 0x21
    1954:	9a a1       	ldd	r25, Y+34	; 0x22
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e8       	ldi	r20, 0x80	; 128
    195c:	5f e3       	ldi	r21, 0x3F	; 63
    195e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1962:	88 23       	and	r24, r24
    1964:	1c f4       	brge	.+6      	; 0x196c <HLCD_VoidLcdIint+0x350>
		__ticks = 1;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	8e 8f       	std	Y+30, r24	; 0x1e
    196a:	91 c0       	rjmp	.+290    	; 0x1a8e <HLCD_VoidLcdIint+0x472>
	else if (__tmp > 255)
    196c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    196e:	78 a1       	ldd	r23, Y+32	; 0x20
    1970:	89 a1       	ldd	r24, Y+33	; 0x21
    1972:	9a a1       	ldd	r25, Y+34	; 0x22
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4f e7       	ldi	r20, 0x7F	; 127
    197a:	53 e4       	ldi	r21, 0x43	; 67
    197c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1980:	18 16       	cp	r1, r24
    1982:	0c f0       	brlt	.+2      	; 0x1986 <HLCD_VoidLcdIint+0x36a>
    1984:	7b c0       	rjmp	.+246    	; 0x1a7c <HLCD_VoidLcdIint+0x460>
	{
		_delay_ms(__us / 1000.0);
    1986:	6b a1       	ldd	r22, Y+35	; 0x23
    1988:	7c a1       	ldd	r23, Y+36	; 0x24
    198a:	8d a1       	ldd	r24, Y+37	; 0x25
    198c:	9e a1       	ldd	r25, Y+38	; 0x26
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	4a e7       	ldi	r20, 0x7A	; 122
    1994:	54 e4       	ldi	r21, 0x44	; 68
    1996:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	8a 8f       	std	Y+26, r24	; 0x1a
    19a0:	9b 8f       	std	Y+27, r25	; 0x1b
    19a2:	ac 8f       	std	Y+28, r26	; 0x1c
    19a4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19a8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	4a ef       	ldi	r20, 0xFA	; 250
    19b4:	54 e4       	ldi	r21, 0x44	; 68
    19b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	8e 8b       	std	Y+22, r24	; 0x16
    19c0:	9f 8b       	std	Y+23, r25	; 0x17
    19c2:	a8 8f       	std	Y+24, r26	; 0x18
    19c4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    19c6:	6e 89       	ldd	r22, Y+22	; 0x16
    19c8:	7f 89       	ldd	r23, Y+23	; 0x17
    19ca:	88 8d       	ldd	r24, Y+24	; 0x18
    19cc:	99 8d       	ldd	r25, Y+25	; 0x19
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e8       	ldi	r20, 0x80	; 128
    19d4:	5f e3       	ldi	r21, 0x3F	; 63
    19d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19da:	88 23       	and	r24, r24
    19dc:	2c f4       	brge	.+10     	; 0x19e8 <HLCD_VoidLcdIint+0x3cc>
		__ticks = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9d 8b       	std	Y+21, r25	; 0x15
    19e4:	8c 8b       	std	Y+20, r24	; 0x14
    19e6:	3f c0       	rjmp	.+126    	; 0x1a66 <HLCD_VoidLcdIint+0x44a>
	else if (__tmp > 65535)
    19e8:	6e 89       	ldd	r22, Y+22	; 0x16
    19ea:	7f 89       	ldd	r23, Y+23	; 0x17
    19ec:	88 8d       	ldd	r24, Y+24	; 0x18
    19ee:	99 8d       	ldd	r25, Y+25	; 0x19
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	3f ef       	ldi	r19, 0xFF	; 255
    19f4:	4f e7       	ldi	r20, 0x7F	; 127
    19f6:	57 e4       	ldi	r21, 0x47	; 71
    19f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19fc:	18 16       	cp	r1, r24
    19fe:	4c f5       	brge	.+82     	; 0x1a52 <HLCD_VoidLcdIint+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a00:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a02:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a06:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e2       	ldi	r20, 0x20	; 32
    1a0e:	51 e4       	ldi	r21, 0x41	; 65
    1a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	bc 01       	movw	r22, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	9d 8b       	std	Y+21, r25	; 0x15
    1a26:	8c 8b       	std	Y+20, r24	; 0x14
    1a28:	0f c0       	rjmp	.+30     	; 0x1a48 <HLCD_VoidLcdIint+0x42c>
    1a2a:	88 ec       	ldi	r24, 0xC8	; 200
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	9b 8b       	std	Y+19, r25	; 0x13
    1a30:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a32:	8a 89       	ldd	r24, Y+18	; 0x12
    1a34:	9b 89       	ldd	r25, Y+19	; 0x13
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <HLCD_VoidLcdIint+0x41a>
    1a3a:	9b 8b       	std	Y+19, r25	; 0x13
    1a3c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3e:	8c 89       	ldd	r24, Y+20	; 0x14
    1a40:	9d 89       	ldd	r25, Y+21	; 0x15
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	9d 8b       	std	Y+21, r25	; 0x15
    1a46:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a48:	8c 89       	ldd	r24, Y+20	; 0x14
    1a4a:	9d 89       	ldd	r25, Y+21	; 0x15
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	69 f7       	brne	.-38     	; 0x1a2a <HLCD_VoidLcdIint+0x40e>
    1a50:	24 c0       	rjmp	.+72     	; 0x1a9a <HLCD_VoidLcdIint+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a52:	6e 89       	ldd	r22, Y+22	; 0x16
    1a54:	7f 89       	ldd	r23, Y+23	; 0x17
    1a56:	88 8d       	ldd	r24, Y+24	; 0x18
    1a58:	99 8d       	ldd	r25, Y+25	; 0x19
    1a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	9d 8b       	std	Y+21, r25	; 0x15
    1a64:	8c 8b       	std	Y+20, r24	; 0x14
    1a66:	8c 89       	ldd	r24, Y+20	; 0x14
    1a68:	9d 89       	ldd	r25, Y+21	; 0x15
    1a6a:	99 8b       	std	Y+17, r25	; 0x11
    1a6c:	88 8b       	std	Y+16, r24	; 0x10
    1a6e:	88 89       	ldd	r24, Y+16	; 0x10
    1a70:	99 89       	ldd	r25, Y+17	; 0x11
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <HLCD_VoidLcdIint+0x456>
    1a76:	99 8b       	std	Y+17, r25	; 0x11
    1a78:	88 8b       	std	Y+16, r24	; 0x10
    1a7a:	0f c0       	rjmp	.+30     	; 0x1a9a <HLCD_VoidLcdIint+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a7c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a7e:	78 a1       	ldd	r23, Y+32	; 0x20
    1a80:	89 a1       	ldd	r24, Y+33	; 0x21
    1a82:	9a a1       	ldd	r25, Y+34	; 0x22
    1a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	8e 8f       	std	Y+30, r24	; 0x1e
    1a8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a90:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a94:	8a 95       	dec	r24
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <HLCD_VoidLcdIint+0x478>
    1a98:	8f 87       	std	Y+15, r24	; 0x0f

	/*Delay for 1 Ms*/
	_delay_us(40);

	/* Display Clear*/
	HLCD_VoidLcdWriteCmd(0x01);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <HLCD_VoidLcdWriteCmd>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a0 e0       	ldi	r26, 0x00	; 0
    1aa6:	b0 e4       	ldi	r27, 0x40	; 64
    1aa8:	8b 87       	std	Y+11, r24	; 0x0b
    1aaa:	9c 87       	std	Y+12, r25	; 0x0c
    1aac:	ad 87       	std	Y+13, r26	; 0x0d
    1aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	4a ef       	ldi	r20, 0xFA	; 250
    1abe:	54 e4       	ldi	r21, 0x44	; 68
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8f 83       	std	Y+7, r24	; 0x07
    1aca:	98 87       	std	Y+8, r25	; 0x08
    1acc:	a9 87       	std	Y+9, r26	; 0x09
    1ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad2:	78 85       	ldd	r23, Y+8	; 0x08
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e8       	ldi	r20, 0x80	; 128
    1ade:	5f e3       	ldi	r21, 0x3F	; 63
    1ae0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ae4:	88 23       	and	r24, r24
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <HLCD_VoidLcdIint+0x4d6>
		__ticks = 1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9e 83       	std	Y+6, r25	; 0x06
    1aee:	8d 83       	std	Y+5, r24	; 0x05
    1af0:	3f c0       	rjmp	.+126    	; 0x1b70 <HLCD_VoidLcdIint+0x554>
	else if (__tmp > 65535)
    1af2:	6f 81       	ldd	r22, Y+7	; 0x07
    1af4:	78 85       	ldd	r23, Y+8	; 0x08
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	3f ef       	ldi	r19, 0xFF	; 255
    1afe:	4f e7       	ldi	r20, 0x7F	; 127
    1b00:	57 e4       	ldi	r21, 0x47	; 71
    1b02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b06:	18 16       	cp	r1, r24
    1b08:	4c f5       	brge	.+82     	; 0x1b5c <HLCD_VoidLcdIint+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e2       	ldi	r20, 0x20	; 32
    1b18:	51 e4       	ldi	r21, 0x41	; 65
    1b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	bc 01       	movw	r22, r24
    1b24:	cd 01       	movw	r24, r26
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	0f c0       	rjmp	.+30     	; 0x1b52 <HLCD_VoidLcdIint+0x536>
    1b34:	88 ec       	ldi	r24, 0xC8	; 200
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <HLCD_VoidLcdIint+0x524>
    1b44:	9c 83       	std	Y+4, r25	; 0x04
    1b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	69 f7       	brne	.-38     	; 0x1b34 <HLCD_VoidLcdIint+0x518>
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <HLCD_VoidLcdIint+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5e:	78 85       	ldd	r23, Y+8	; 0x08
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <HLCD_VoidLcdIint+0x560>
    1b80:	9a 83       	std	Y+2, r25	; 0x02
    1b82:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for 1 Ms*/
	_delay_ms(2);

	/* Display Entery Mode Set*/
	HLCD_VoidLcdWriteCmd(0x06);
    1b84:	86 e0       	ldi	r24, 0x06	; 6
    1b86:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <HLCD_VoidLcdWriteCmd>
}
    1b8a:	c4 5b       	subi	r28, 0xB4	; 180
    1b8c:	df 4f       	sbci	r29, 0xFF	; 255
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	08 95       	ret

00001ba2 <HLCD_VoidLcdWriteCmd>:

void HLCD_VoidLcdWriteCmd(u8 Copy_u8Cmd)
{
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	69 97       	sbiw	r28, 0x19	; 25
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	89 8f       	std	Y+25, r24	; 0x19

	/*	RS pin  = 0 ==> Select Command Register*/
	MDIO_u8SetPinValue(HLCD_RS_PORT, HLCD_RS_PIN, MDIO_LOW);
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	0e 94 c8 08 	call	0x1190	; 0x1190 <MDIO_u8SetPinValue>

	/*	R/W pin  = 0 ==> Select Write Mode*/
	MDIO_u8SetPinValue(HLCD_RW_PORT, HLCD_RW_PIN, MDIO_LOW);
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	61 e0       	ldi	r22, 0x01	; 1
    1bc6:	40 e0       	ldi	r20, 0x00	; 0
    1bc8:	0e 94 c8 08 	call	0x1190	; 0x1190 <MDIO_u8SetPinValue>

	/*	E pin  = 1 ==> Enable the command */
	MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_HIGH);
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	62 e0       	ldi	r22, 0x02	; 2
    1bd0:	41 e0       	ldi	r20, 0x01	; 1
    1bd2:	0e 94 c8 08 	call	0x1190	; 0x1190 <MDIO_u8SetPinValue>

	/*	Write Command */
	MDIO_u8SetPortValue(HLCD_DATA_PORT, Copy_u8Cmd);
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bda:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a0 e8       	ldi	r26, 0x80	; 128
    1be4:	bf e3       	ldi	r27, 0x3F	; 63
    1be6:	8d 8b       	std	Y+21, r24	; 0x15
    1be8:	9e 8b       	std	Y+22, r25	; 0x16
    1bea:	af 8b       	std	Y+23, r26	; 0x17
    1bec:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bee:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf6:	2b ea       	ldi	r18, 0xAB	; 171
    1bf8:	3a ea       	ldi	r19, 0xAA	; 170
    1bfa:	4a e2       	ldi	r20, 0x2A	; 42
    1bfc:	50 e4       	ldi	r21, 0x40	; 64
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	89 8b       	std	Y+17, r24	; 0x11
    1c08:	9a 8b       	std	Y+18, r25	; 0x12
    1c0a:	ab 8b       	std	Y+19, r26	; 0x13
    1c0c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c0e:	69 89       	ldd	r22, Y+17	; 0x11
    1c10:	7a 89       	ldd	r23, Y+18	; 0x12
    1c12:	8b 89       	ldd	r24, Y+19	; 0x13
    1c14:	9c 89       	ldd	r25, Y+20	; 0x14
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e8       	ldi	r20, 0x80	; 128
    1c1c:	5f e3       	ldi	r21, 0x3F	; 63
    1c1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c22:	88 23       	and	r24, r24
    1c24:	1c f4       	brge	.+6      	; 0x1c2c <HLCD_VoidLcdWriteCmd+0x8a>
		__ticks = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	88 8b       	std	Y+16, r24	; 0x10
    1c2a:	91 c0       	rjmp	.+290    	; 0x1d4e <HLCD_VoidLcdWriteCmd+0x1ac>
	else if (__tmp > 255)
    1c2c:	69 89       	ldd	r22, Y+17	; 0x11
    1c2e:	7a 89       	ldd	r23, Y+18	; 0x12
    1c30:	8b 89       	ldd	r24, Y+19	; 0x13
    1c32:	9c 89       	ldd	r25, Y+20	; 0x14
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	53 e4       	ldi	r21, 0x43	; 67
    1c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	0c f0       	brlt	.+2      	; 0x1c46 <HLCD_VoidLcdWriteCmd+0xa4>
    1c44:	7b c0       	rjmp	.+246    	; 0x1d3c <HLCD_VoidLcdWriteCmd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1c46:	6d 89       	ldd	r22, Y+21	; 0x15
    1c48:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	4a e7       	ldi	r20, 0x7A	; 122
    1c54:	54 e4       	ldi	r21, 0x44	; 68
    1c56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	8c 87       	std	Y+12, r24	; 0x0c
    1c60:	9d 87       	std	Y+13, r25	; 0x0d
    1c62:	ae 87       	std	Y+14, r26	; 0x0e
    1c64:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c66:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c68:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	4a ef       	ldi	r20, 0xFA	; 250
    1c74:	54 e4       	ldi	r21, 0x44	; 68
    1c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	88 87       	std	Y+8, r24	; 0x08
    1c80:	99 87       	std	Y+9, r25	; 0x09
    1c82:	aa 87       	std	Y+10, r26	; 0x0a
    1c84:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c86:	68 85       	ldd	r22, Y+8	; 0x08
    1c88:	79 85       	ldd	r23, Y+9	; 0x09
    1c8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e8       	ldi	r20, 0x80	; 128
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	2c f4       	brge	.+10     	; 0x1ca8 <HLCD_VoidLcdWriteCmd+0x106>
		__ticks = 1;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	9f 83       	std	Y+7, r25	; 0x07
    1ca4:	8e 83       	std	Y+6, r24	; 0x06
    1ca6:	3f c0       	rjmp	.+126    	; 0x1d26 <HLCD_VoidLcdWriteCmd+0x184>
	else if (__tmp > 65535)
    1ca8:	68 85       	ldd	r22, Y+8	; 0x08
    1caa:	79 85       	ldd	r23, Y+9	; 0x09
    1cac:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cae:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	57 e4       	ldi	r21, 0x47	; 71
    1cb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	4c f5       	brge	.+82     	; 0x1d12 <HLCD_VoidLcdWriteCmd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cc2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e2       	ldi	r20, 0x20	; 32
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9f 83       	std	Y+7, r25	; 0x07
    1ce6:	8e 83       	std	Y+6, r24	; 0x06
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <HLCD_VoidLcdWriteCmd+0x166>
    1cea:	88 ec       	ldi	r24, 0xC8	; 200
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9d 83       	std	Y+5, r25	; 0x05
    1cf0:	8c 83       	std	Y+4, r24	; 0x04
    1cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <HLCD_VoidLcdWriteCmd+0x154>
    1cfa:	9d 83       	std	Y+5, r25	; 0x05
    1cfc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1d00:	9f 81       	ldd	r25, Y+7	; 0x07
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	9f 83       	std	Y+7, r25	; 0x07
    1d06:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <HLCD_VoidLcdWriteCmd+0x148>
    1d10:	24 c0       	rjmp	.+72     	; 0x1d5a <HLCD_VoidLcdWriteCmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d12:	68 85       	ldd	r22, Y+8	; 0x08
    1d14:	79 85       	ldd	r23, Y+9	; 0x09
    1d16:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d18:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9f 83       	std	Y+7, r25	; 0x07
    1d24:	8e 83       	std	Y+6, r24	; 0x06
    1d26:	8e 81       	ldd	r24, Y+6	; 0x06
    1d28:	9f 81       	ldd	r25, Y+7	; 0x07
    1d2a:	9b 83       	std	Y+3, r25	; 0x03
    1d2c:	8a 83       	std	Y+2, r24	; 0x02
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	9b 81       	ldd	r25, Y+3	; 0x03
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <HLCD_VoidLcdWriteCmd+0x190>
    1d36:	9b 83       	std	Y+3, r25	; 0x03
    1d38:	8a 83       	std	Y+2, r24	; 0x02
    1d3a:	0f c0       	rjmp	.+30     	; 0x1d5a <HLCD_VoidLcdWriteCmd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d3c:	69 89       	ldd	r22, Y+17	; 0x11
    1d3e:	7a 89       	ldd	r23, Y+18	; 0x12
    1d40:	8b 89       	ldd	r24, Y+19	; 0x13
    1d42:	9c 89       	ldd	r25, Y+20	; 0x14
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	88 8b       	std	Y+16, r24	; 0x10
    1d4e:	88 89       	ldd	r24, Y+16	; 0x10
    1d50:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	8a 95       	dec	r24
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <HLCD_VoidLcdWriteCmd+0x1b2>
    1d58:	89 83       	std	Y+1, r24	; 0x01

	/*	Wait for 230 ns */
	_delay_us(1);

	/*	E pin  = 0 ==> Disable the command*/
	MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_LOW);
    1d5a:	83 e0       	ldi	r24, 0x03	; 3
    1d5c:	62 e0       	ldi	r22, 0x02	; 2
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	0e 94 c8 08 	call	0x1190	; 0x1190 <MDIO_u8SetPinValue>
}
    1d64:	69 96       	adiw	r28, 0x19	; 25
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <HLCD_VoidLcdWriteChar>:

void HLCD_VoidLcdWriteChar(u8 Copy_u8Char)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	69 97       	sbiw	r28, 0x19	; 25
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	89 8f       	std	Y+25, r24	; 0x19

	/*	RS pin  = 0 ==> Select Command Register*/
	MDIO_u8SetPinValue(HLCD_RS_PORT, HLCD_RS_PIN, MDIO_HIGH);
    1d8c:	83 e0       	ldi	r24, 0x03	; 3
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	41 e0       	ldi	r20, 0x01	; 1
    1d92:	0e 94 c8 08 	call	0x1190	; 0x1190 <MDIO_u8SetPinValue>

	/*	R/W pin  = 0 ==> Select Write Mode*/
	MDIO_u8SetPinValue(HLCD_RW_PORT, HLCD_RW_PIN, MDIO_LOW);
    1d96:	83 e0       	ldi	r24, 0x03	; 3
    1d98:	61 e0       	ldi	r22, 0x01	; 1
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	0e 94 c8 08 	call	0x1190	; 0x1190 <MDIO_u8SetPinValue>

	/*	E pin  = 1 ==> Enable the command */
	MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_HIGH);
    1da0:	83 e0       	ldi	r24, 0x03	; 3
    1da2:	62 e0       	ldi	r22, 0x02	; 2
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	0e 94 c8 08 	call	0x1190	; 0x1190 <MDIO_u8SetPinValue>

	/*	Write Command */
	MDIO_u8SetPortValue(HLCD_DATA_PORT, Copy_u8Char);
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	69 8d       	ldd	r22, Y+25	; 0x19
    1dae:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	a0 e8       	ldi	r26, 0x80	; 128
    1db8:	bf e3       	ldi	r27, 0x3F	; 63
    1dba:	8d 8b       	std	Y+21, r24	; 0x15
    1dbc:	9e 8b       	std	Y+22, r25	; 0x16
    1dbe:	af 8b       	std	Y+23, r26	; 0x17
    1dc0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dca:	2b ea       	ldi	r18, 0xAB	; 171
    1dcc:	3a ea       	ldi	r19, 0xAA	; 170
    1dce:	4a e2       	ldi	r20, 0x2A	; 42
    1dd0:	50 e4       	ldi	r21, 0x40	; 64
    1dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	89 8b       	std	Y+17, r24	; 0x11
    1ddc:	9a 8b       	std	Y+18, r25	; 0x12
    1dde:	ab 8b       	std	Y+19, r26	; 0x13
    1de0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1de2:	69 89       	ldd	r22, Y+17	; 0x11
    1de4:	7a 89       	ldd	r23, Y+18	; 0x12
    1de6:	8b 89       	ldd	r24, Y+19	; 0x13
    1de8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e8       	ldi	r20, 0x80	; 128
    1df0:	5f e3       	ldi	r21, 0x3F	; 63
    1df2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df6:	88 23       	and	r24, r24
    1df8:	1c f4       	brge	.+6      	; 0x1e00 <HLCD_VoidLcdWriteChar+0x8a>
		__ticks = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	88 8b       	std	Y+16, r24	; 0x10
    1dfe:	91 c0       	rjmp	.+290    	; 0x1f22 <HLCD_VoidLcdWriteChar+0x1ac>
	else if (__tmp > 255)
    1e00:	69 89       	ldd	r22, Y+17	; 0x11
    1e02:	7a 89       	ldd	r23, Y+18	; 0x12
    1e04:	8b 89       	ldd	r24, Y+19	; 0x13
    1e06:	9c 89       	ldd	r25, Y+20	; 0x14
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4f e7       	ldi	r20, 0x7F	; 127
    1e0e:	53 e4       	ldi	r21, 0x43	; 67
    1e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e14:	18 16       	cp	r1, r24
    1e16:	0c f0       	brlt	.+2      	; 0x1e1a <HLCD_VoidLcdWriteChar+0xa4>
    1e18:	7b c0       	rjmp	.+246    	; 0x1f10 <HLCD_VoidLcdWriteChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1e1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e20:	98 8d       	ldd	r25, Y+24	; 0x18
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	4a e7       	ldi	r20, 0x7A	; 122
    1e28:	54 e4       	ldi	r21, 0x44	; 68
    1e2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	8c 87       	std	Y+12, r24	; 0x0c
    1e34:	9d 87       	std	Y+13, r25	; 0x0d
    1e36:	ae 87       	std	Y+14, r26	; 0x0e
    1e38:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e3c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e40:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	4a ef       	ldi	r20, 0xFA	; 250
    1e48:	54 e4       	ldi	r21, 0x44	; 68
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	88 87       	std	Y+8, r24	; 0x08
    1e54:	99 87       	std	Y+9, r25	; 0x09
    1e56:	aa 87       	std	Y+10, r26	; 0x0a
    1e58:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e5a:	68 85       	ldd	r22, Y+8	; 0x08
    1e5c:	79 85       	ldd	r23, Y+9	; 0x09
    1e5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e8       	ldi	r20, 0x80	; 128
    1e68:	5f e3       	ldi	r21, 0x3F	; 63
    1e6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e6e:	88 23       	and	r24, r24
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <HLCD_VoidLcdWriteChar+0x106>
		__ticks = 1;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9f 83       	std	Y+7, r25	; 0x07
    1e78:	8e 83       	std	Y+6, r24	; 0x06
    1e7a:	3f c0       	rjmp	.+126    	; 0x1efa <HLCD_VoidLcdWriteChar+0x184>
	else if (__tmp > 65535)
    1e7c:	68 85       	ldd	r22, Y+8	; 0x08
    1e7e:	79 85       	ldd	r23, Y+9	; 0x09
    1e80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	3f ef       	ldi	r19, 0xFF	; 255
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	57 e4       	ldi	r21, 0x47	; 71
    1e8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e90:	18 16       	cp	r1, r24
    1e92:	4c f5       	brge	.+82     	; 0x1ee6 <HLCD_VoidLcdWriteChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e94:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e96:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e98:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e2       	ldi	r20, 0x20	; 32
    1ea2:	51 e4       	ldi	r21, 0x41	; 65
    1ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	bc 01       	movw	r22, r24
    1eae:	cd 01       	movw	r24, r26
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	9f 83       	std	Y+7, r25	; 0x07
    1eba:	8e 83       	std	Y+6, r24	; 0x06
    1ebc:	0f c0       	rjmp	.+30     	; 0x1edc <HLCD_VoidLcdWriteChar+0x166>
    1ebe:	88 ec       	ldi	r24, 0xC8	; 200
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9d 83       	std	Y+5, r25	; 0x05
    1ec4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <HLCD_VoidLcdWriteChar+0x154>
    1ece:	9d 83       	std	Y+5, r25	; 0x05
    1ed0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	9f 83       	std	Y+7, r25	; 0x07
    1eda:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1edc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ede:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	69 f7       	brne	.-38     	; 0x1ebe <HLCD_VoidLcdWriteChar+0x148>
    1ee4:	24 c0       	rjmp	.+72     	; 0x1f2e <HLCD_VoidLcdWriteChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee6:	68 85       	ldd	r22, Y+8	; 0x08
    1ee8:	79 85       	ldd	r23, Y+9	; 0x09
    1eea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9f 83       	std	Y+7, r25	; 0x07
    1ef8:	8e 83       	std	Y+6, r24	; 0x06
    1efa:	8e 81       	ldd	r24, Y+6	; 0x06
    1efc:	9f 81       	ldd	r25, Y+7	; 0x07
    1efe:	9b 83       	std	Y+3, r25	; 0x03
    1f00:	8a 83       	std	Y+2, r24	; 0x02
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	9b 81       	ldd	r25, Y+3	; 0x03
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <HLCD_VoidLcdWriteChar+0x190>
    1f0a:	9b 83       	std	Y+3, r25	; 0x03
    1f0c:	8a 83       	std	Y+2, r24	; 0x02
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <HLCD_VoidLcdWriteChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f10:	69 89       	ldd	r22, Y+17	; 0x11
    1f12:	7a 89       	ldd	r23, Y+18	; 0x12
    1f14:	8b 89       	ldd	r24, Y+19	; 0x13
    1f16:	9c 89       	ldd	r25, Y+20	; 0x14
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	88 8b       	std	Y+16, r24	; 0x10
    1f22:	88 89       	ldd	r24, Y+16	; 0x10
    1f24:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	8a 95       	dec	r24
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <HLCD_VoidLcdWriteChar+0x1b2>
    1f2c:	89 83       	std	Y+1, r24	; 0x01

	/*	Wait for 230 ns */
	_delay_us(1);

	/*	E pin  = 0 ==> Disable the command*/
	MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_LOW);
    1f2e:	83 e0       	ldi	r24, 0x03	; 3
    1f30:	62 e0       	ldi	r22, 0x02	; 2
    1f32:	40 e0       	ldi	r20, 0x00	; 0
    1f34:	0e 94 c8 08 	call	0x1190	; 0x1190 <MDIO_u8SetPinValue>
}
    1f38:	69 96       	adiw	r28, 0x19	; 25
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <HLCD_VoidSetCurser>:
u8 HLCD_VoidSetCurser(u8 Copy_u8LineNb, u8 Copy_u8CharNb)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <HLCD_VoidSetCurser+0x6>
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <HLCD_VoidSetCurser+0x8>
    1f52:	0f 92       	push	r0
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	8a 83       	std	Y+2, r24	; 0x02
    1f5a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8LineNb)
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	3d 83       	std	Y+5, r19	; 0x05
    1f68:	2c 83       	std	Y+4, r18	; 0x04
    1f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6e:	81 30       	cpi	r24, 0x01	; 1
    1f70:	91 05       	cpc	r25, r1
    1f72:	31 f0       	breq	.+12     	; 0x1f80 <HLCD_VoidSetCurser+0x36>
    1f74:	2c 81       	ldd	r18, Y+4	; 0x04
    1f76:	3d 81       	ldd	r19, Y+5	; 0x05
    1f78:	22 30       	cpi	r18, 0x02	; 2
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	31 f0       	breq	.+12     	; 0x1f8a <HLCD_VoidSetCurser+0x40>
    1f7e:	0a c0       	rjmp	.+20     	; 0x1f94 <HLCD_VoidSetCurser+0x4a>
	{
	case HLCD_LINE_1:
		HLCD_VoidLcdWriteCmd(0x80 + Copy_u8CharNb);
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	80 58       	subi	r24, 0x80	; 128
    1f84:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <HLCD_VoidLcdWriteCmd>
    1f88:	06 c0       	rjmp	.+12     	; 0x1f96 <HLCD_VoidSetCurser+0x4c>
		break;
	case HLCD_LINE_2:
		HLCD_VoidLcdWriteCmd(0xc0 + Copy_u8CharNb);
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	80 54       	subi	r24, 0x40	; 64
    1f8e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <HLCD_VoidLcdWriteCmd>
    1f92:	01 c0       	rjmp	.+2      	; 0x1f96 <HLCD_VoidSetCurser+0x4c>
		break;
	default:
		Local_u8ErrorState = STD_TYPE_NOK;
    1f94:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	return Local_u8ErrorState;
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <HLCD_u8WriteStr>:
u8 HLCD_u8WriteStr(const char *Copy_pcStr)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <HLCD_u8WriteStr+0x6>
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <HLCD_u8WriteStr+0x8>
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <HLCD_u8WriteStr+0xa>
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	9d 83       	std	Y+5, r25	; 0x05
    1fb8:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8ErrorState = STD_TYPE_OK;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	8b 83       	std	Y+3, r24	; 0x03

    if (Copy_pcStr == STD_TYPE_POINTER_NULL)
    1fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	11 f4       	brne	.+4      	; 0x1fca <HLCD_u8WriteStr+0x22>
    {
        return STD_TYPE_NOK; // Error if null pointer is passed
    1fc6:	1e 82       	std	Y+6, r1	; 0x06
    1fc8:	33 c0       	rjmp	.+102    	; 0x2030 <HLCD_u8WriteStr+0x88>
    }

    // Starting position
    u8 Line = HLCD_LINE_1;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	8a 83       	std	Y+2, r24	; 0x02
    u8 CharPos = 0;
    1fce:	19 82       	std	Y+1, r1	; 0x01
    1fd0:	28 c0       	rjmp	.+80     	; 0x2022 <HLCD_u8WriteStr+0x7a>

    // Write characters until the end of the string
    while (*Copy_pcStr)
    {
        // If we reach the end of the first line, switch to the second line
        if (CharPos >= 16 && Line == HLCD_LINE_1)
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	80 31       	cpi	r24, 0x10	; 16
    1fd6:	50 f0       	brcs	.+20     	; 0x1fec <HLCD_u8WriteStr+0x44>
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	39 f4       	brne	.+14     	; 0x1fec <HLCD_u8WriteStr+0x44>
        {
            Line = HLCD_LINE_2;
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	8a 83       	std	Y+2, r24	; 0x02
            CharPos = 0;
    1fe2:	19 82       	std	Y+1, r1	; 0x01
            HLCD_VoidSetCurser(Line, CharPos); // Move cursor to start of the second line
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	69 81       	ldd	r22, Y+1	; 0x01
    1fe8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <HLCD_VoidSetCurser>
        }

        // If we reach the end of the second line, wrap around to the start of the first line
        if (CharPos >= 16 && Line == HLCD_LINE_2)
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	80 31       	cpi	r24, 0x10	; 16
    1ff0:	50 f0       	brcs	.+20     	; 0x2006 <HLCD_u8WriteStr+0x5e>
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	82 30       	cpi	r24, 0x02	; 2
    1ff6:	39 f4       	brne	.+14     	; 0x2006 <HLCD_u8WriteStr+0x5e>
        {
            Line = HLCD_LINE_1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	8a 83       	std	Y+2, r24	; 0x02
            CharPos = 0;
    1ffc:	19 82       	std	Y+1, r1	; 0x01
            HLCD_VoidSetCurser(Line, CharPos); // Move cursor to start of the first line
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	69 81       	ldd	r22, Y+1	; 0x01
    2002:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <HLCD_VoidSetCurser>
        }

        // Write the current character to the LCD
        HLCD_VoidLcdWriteChar(*Copy_pcStr++);
    2006:	ec 81       	ldd	r30, Y+4	; 0x04
    2008:	fd 81       	ldd	r31, Y+5	; 0x05
    200a:	20 81       	ld	r18, Z
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	9d 81       	ldd	r25, Y+5	; 0x05
    2010:	01 96       	adiw	r24, 0x01	; 1
    2012:	9d 83       	std	Y+5, r25	; 0x05
    2014:	8c 83       	std	Y+4, r24	; 0x04
    2016:	82 2f       	mov	r24, r18
    2018:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <HLCD_VoidLcdWriteChar>

        // Increment character position
        CharPos++;
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	8f 5f       	subi	r24, 0xFF	; 255
    2020:	89 83       	std	Y+1, r24	; 0x01
    // Starting position
    u8 Line = HLCD_LINE_1;
    u8 CharPos = 0;

    // Write characters until the end of the string
    while (*Copy_pcStr)
    2022:	ec 81       	ldd	r30, Y+4	; 0x04
    2024:	fd 81       	ldd	r31, Y+5	; 0x05
    2026:	80 81       	ld	r24, Z
    2028:	88 23       	and	r24, r24
    202a:	99 f6       	brne	.-90     	; 0x1fd2 <HLCD_u8WriteStr+0x2a>

        // Increment character position
        CharPos++;
    }

    return Local_u8ErrorState;
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	8e 83       	std	Y+6, r24	; 0x06
    2030:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2032:	26 96       	adiw	r28, 0x06	; 6
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <HLCD_VoidLcdClear>:
void HLCD_VoidLcdClear(void)
{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	2e 97       	sbiw	r28, 0x0e	; 14
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    // Send the clear display command (0x01) to the LCD
    HLCD_VoidLcdWriteCmd(0x01);
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <HLCD_VoidLcdWriteCmd>
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	a0 e0       	ldi	r26, 0x00	; 0
    2064:	b0 e4       	ldi	r27, 0x40	; 64
    2066:	8b 87       	std	Y+11, r24	; 0x0b
    2068:	9c 87       	std	Y+12, r25	; 0x0c
    206a:	ad 87       	std	Y+13, r26	; 0x0d
    206c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2070:	7c 85       	ldd	r23, Y+12	; 0x0c
    2072:	8d 85       	ldd	r24, Y+13	; 0x0d
    2074:	9e 85       	ldd	r25, Y+14	; 0x0e
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	4a ef       	ldi	r20, 0xFA	; 250
    207c:	54 e4       	ldi	r21, 0x44	; 68
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	8f 83       	std	Y+7, r24	; 0x07
    2088:	98 87       	std	Y+8, r25	; 0x08
    208a:	a9 87       	std	Y+9, r26	; 0x09
    208c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    208e:	6f 81       	ldd	r22, Y+7	; 0x07
    2090:	78 85       	ldd	r23, Y+8	; 0x08
    2092:	89 85       	ldd	r24, Y+9	; 0x09
    2094:	9a 85       	ldd	r25, Y+10	; 0x0a
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e8       	ldi	r20, 0x80	; 128
    209c:	5f e3       	ldi	r21, 0x3F	; 63
    209e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a2:	88 23       	and	r24, r24
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <HLCD_VoidLcdClear+0x6c>
		__ticks = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
    20ae:	3f c0       	rjmp	.+126    	; 0x212e <HLCD_VoidLcdClear+0xea>
	else if (__tmp > 65535)
    20b0:	6f 81       	ldd	r22, Y+7	; 0x07
    20b2:	78 85       	ldd	r23, Y+8	; 0x08
    20b4:	89 85       	ldd	r24, Y+9	; 0x09
    20b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	3f ef       	ldi	r19, 0xFF	; 255
    20bc:	4f e7       	ldi	r20, 0x7F	; 127
    20be:	57 e4       	ldi	r21, 0x47	; 71
    20c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20c4:	18 16       	cp	r1, r24
    20c6:	4c f5       	brge	.+82     	; 0x211a <HLCD_VoidLcdClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    20cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e2       	ldi	r20, 0x20	; 32
    20d6:	51 e4       	ldi	r21, 0x41	; 65
    20d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	8d 83       	std	Y+5, r24	; 0x05
    20f0:	0f c0       	rjmp	.+30     	; 0x2110 <HLCD_VoidLcdClear+0xcc>
    20f2:	88 ec       	ldi	r24, 0xC8	; 200
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <HLCD_VoidLcdClear+0xba>
    2102:	9c 83       	std	Y+4, r25	; 0x04
    2104:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	69 f7       	brne	.-38     	; 0x20f2 <HLCD_VoidLcdClear+0xae>
    2118:	14 c0       	rjmp	.+40     	; 0x2142 <HLCD_VoidLcdClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211a:	6f 81       	ldd	r22, Y+7	; 0x07
    211c:	78 85       	ldd	r23, Y+8	; 0x08
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	9a 85       	ldd	r25, Y+10	; 0x0a
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	8d 83       	std	Y+5, r24	; 0x05
    212e:	8d 81       	ldd	r24, Y+5	; 0x05
    2130:	9e 81       	ldd	r25, Y+6	; 0x06
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <HLCD_VoidLcdClear+0xf6>
    213e:	9a 83       	std	Y+2, r25	; 0x02
    2140:	89 83       	std	Y+1, r24	; 0x01

    // Delay to allow the LCD to process the command and clear the screen
    _delay_ms(2); // 2 ms is typically enough for clearing the screen
}
    2142:	2e 96       	adiw	r28, 0x0e	; 14
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <HLCD_VoidLcdWriteInt>:
void HLCD_VoidLcdWriteInt(int Copy_u32Number)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	a0 97       	sbiw	r28, 0x20	; 32
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	98 a3       	std	Y+32, r25	; 0x20
    216a:	8f 8f       	std	Y+31, r24	; 0x1f
    char buffer[BUFFER_SIZE]; // Buffer to hold the converted string
    char temp[BUFFER_SIZE]; // Temporary buffer for reverse string
    int isNegative = 0; // Flag to check if number is negative
    216c:	1e 82       	std	Y+6, r1	; 0x06
    216e:	1d 82       	std	Y+5, r1	; 0x05
    int i = 0, j;
    2170:	1c 82       	std	Y+4, r1	; 0x04
    2172:	1b 82       	std	Y+3, r1	; 0x03

    // Check if the number is negative
    if (Copy_u32Number < 0)
    2174:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2176:	98 a1       	ldd	r25, Y+32	; 0x20
    2178:	99 23       	and	r25, r25
    217a:	5c f4       	brge	.+22     	; 0x2192 <HLCD_VoidLcdWriteInt+0x3e>
    {
        isNegative = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
        Copy_u32Number = -Copy_u32Number; // Make number positive
    2184:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2186:	98 a1       	ldd	r25, Y+32	; 0x20
    2188:	90 95       	com	r25
    218a:	81 95       	neg	r24
    218c:	9f 4f       	sbci	r25, 0xFF	; 255
    218e:	98 a3       	std	Y+32, r25	; 0x20
    2190:	8f 8f       	std	Y+31, r24	; 0x1f
    }

    // Convert integer to string
    do
    {
        buffer[i++] = (Copy_u32Number % 10) + '0'; // Get last digit
    2192:	eb 81       	ldd	r30, Y+3	; 0x03
    2194:	fc 81       	ldd	r31, Y+4	; 0x04
    2196:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2198:	98 a1       	ldd	r25, Y+32	; 0x20
    219a:	2a e0       	ldi	r18, 0x0A	; 10
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	b9 01       	movw	r22, r18
    21a0:	0e 94 43 1a 	call	0x3486	; 0x3486 <__divmodhi4>
    21a4:	28 2f       	mov	r18, r24
    21a6:	20 5d       	subi	r18, 0xD0	; 208
    21a8:	ce 01       	movw	r24, r28
    21aa:	07 96       	adiw	r24, 0x07	; 7
    21ac:	e8 0f       	add	r30, r24
    21ae:	f9 1f       	adc	r31, r25
    21b0:	20 83       	st	Z, r18
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	9c 81       	ldd	r25, Y+4	; 0x04
    21b6:	01 96       	adiw	r24, 0x01	; 1
    21b8:	9c 83       	std	Y+4, r25	; 0x04
    21ba:	8b 83       	std	Y+3, r24	; 0x03
        Copy_u32Number /= 10; // Remove last digit
    21bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21be:	98 a1       	ldd	r25, Y+32	; 0x20
    21c0:	2a e0       	ldi	r18, 0x0A	; 10
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	b9 01       	movw	r22, r18
    21c6:	0e 94 43 1a 	call	0x3486	; 0x3486 <__divmodhi4>
    21ca:	cb 01       	movw	r24, r22
    21cc:	98 a3       	std	Y+32, r25	; 0x20
    21ce:	8f 8f       	std	Y+31, r24	; 0x1f
    } while (Copy_u32Number > 0);
    21d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d2:	98 a1       	ldd	r25, Y+32	; 0x20
    21d4:	18 16       	cp	r1, r24
    21d6:	19 06       	cpc	r1, r25
    21d8:	e4 f2       	brlt	.-72     	; 0x2192 <HLCD_VoidLcdWriteInt+0x3e>

    // Add negative sign if needed
    if (isNegative)
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	71 f0       	breq	.+28     	; 0x21fe <HLCD_VoidLcdWriteInt+0xaa>
    {
        buffer[i++] = '-';
    21e2:	2b 81       	ldd	r18, Y+3	; 0x03
    21e4:	3c 81       	ldd	r19, Y+4	; 0x04
    21e6:	ce 01       	movw	r24, r28
    21e8:	07 96       	adiw	r24, 0x07	; 7
    21ea:	fc 01       	movw	r30, r24
    21ec:	e2 0f       	add	r30, r18
    21ee:	f3 1f       	adc	r31, r19
    21f0:	8d e2       	ldi	r24, 0x2D	; 45
    21f2:	80 83       	st	Z, r24
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	9c 83       	std	Y+4, r25	; 0x04
    21fc:	8b 83       	std	Y+3, r24	; 0x03
    }

    // Reverse the string
    buffer[i] = '\0'; // Null-terminate the string
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	9e 01       	movw	r18, r28
    2204:	29 5f       	subi	r18, 0xF9	; 249
    2206:	3f 4f       	sbci	r19, 0xFF	; 255
    2208:	f9 01       	movw	r30, r18
    220a:	e8 0f       	add	r30, r24
    220c:	f9 1f       	adc	r31, r25
    220e:	10 82       	st	Z, r1
    for (j = 0; j < i; j++)
    2210:	1a 82       	std	Y+2, r1	; 0x02
    2212:	19 82       	std	Y+1, r1	; 0x01
    2214:	1e c0       	rjmp	.+60     	; 0x2252 <HLCD_VoidLcdWriteInt+0xfe>
    {
        temp[j] = buffer[i - j - 1];
    2216:	49 81       	ldd	r20, Y+1	; 0x01
    2218:	5a 81       	ldd	r21, Y+2	; 0x02
    221a:	2b 81       	ldd	r18, Y+3	; 0x03
    221c:	3c 81       	ldd	r19, Y+4	; 0x04
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	9a 81       	ldd	r25, Y+2	; 0x02
    2222:	b9 01       	movw	r22, r18
    2224:	68 1b       	sub	r22, r24
    2226:	79 0b       	sbc	r23, r25
    2228:	cb 01       	movw	r24, r22
    222a:	9c 01       	movw	r18, r24
    222c:	21 50       	subi	r18, 0x01	; 1
    222e:	30 40       	sbci	r19, 0x00	; 0
    2230:	ce 01       	movw	r24, r28
    2232:	07 96       	adiw	r24, 0x07	; 7
    2234:	fc 01       	movw	r30, r24
    2236:	e2 0f       	add	r30, r18
    2238:	f3 1f       	adc	r31, r19
    223a:	20 81       	ld	r18, Z
    223c:	ce 01       	movw	r24, r28
    223e:	43 96       	adiw	r24, 0x13	; 19
    2240:	fc 01       	movw	r30, r24
    2242:	e4 0f       	add	r30, r20
    2244:	f5 1f       	adc	r31, r21
    2246:	20 83       	st	Z, r18
        buffer[i++] = '-';
    }

    // Reverse the string
    buffer[i] = '\0'; // Null-terminate the string
    for (j = 0; j < i; j++)
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	9a 83       	std	Y+2, r25	; 0x02
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	29 81       	ldd	r18, Y+1	; 0x01
    2254:	3a 81       	ldd	r19, Y+2	; 0x02
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	9c 81       	ldd	r25, Y+4	; 0x04
    225a:	28 17       	cp	r18, r24
    225c:	39 07       	cpc	r19, r25
    225e:	dc f2       	brlt	.-74     	; 0x2216 <HLCD_VoidLcdWriteInt+0xc2>
    {
        temp[j] = buffer[i - j - 1];
    }
    temp[i] = '\0'; // Null-terminate the reversed string
    2260:	2b 81       	ldd	r18, Y+3	; 0x03
    2262:	3c 81       	ldd	r19, Y+4	; 0x04
    2264:	ce 01       	movw	r24, r28
    2266:	43 96       	adiw	r24, 0x13	; 19
    2268:	fc 01       	movw	r30, r24
    226a:	e2 0f       	add	r30, r18
    226c:	f3 1f       	adc	r31, r19
    226e:	10 82       	st	Z, r1

    // Write the string to the LCD
    HLCD_u8WriteStr(temp);
    2270:	ce 01       	movw	r24, r28
    2272:	43 96       	adiw	r24, 0x13	; 19
    2274:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <HLCD_u8WriteStr>
}
    2278:	a0 96       	adiw	r28, 0x20	; 32
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <HKPD_u8GetPressedKey>:
static u8 HKPD_AU8ColsPins[4] = {HKPD_C1_PIN, HKPD_C2_PIN, HKPD_C3_PIN, HKPD_C4_PIN};
static u8 HKPD_Au8Keys[4][4] = HKPD_KPD;


u8 HKPD_u8GetPressedKey(u8 *Copy_u8KeyPressed)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	64 97       	sbiw	r28, 0x14	; 20
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	9c 8b       	std	Y+20, r25	; 0x14
    22a0:	8b 8b       	std	Y+19, r24	; 0x13
    u8 Local_u8ErrorState = STD_TYPE_NOK;
    22a2:	19 8a       	std	Y+17, r1	; 0x11
    u8 Local_u8RowCounter;
    u8 Local_u8ColCounter;
    u8 Local_u8PinValue;
    if (Copy_u8KeyPressed != STD_TYPE_POINTER_NULL)
    22a4:	8b 89       	ldd	r24, Y+19	; 0x13
    22a6:	9c 89       	ldd	r25, Y+20	; 0x14
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	09 f4       	brne	.+2      	; 0x22ae <HKPD_u8GetPressedKey+0x24>
    22ac:	d8 c0       	rjmp	.+432    	; 0x245e <HKPD_u8GetPressedKey+0x1d4>
    {
        Local_u8ErrorState = STD_TYPE_OK;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	89 8b       	std	Y+17, r24	; 0x11
        //*Copy_u8KeyPressed = HKPD_NO_KEY_PRESSED;
        for (Local_u8RowCounter = 0; Local_u8RowCounter < 4; Local_u8RowCounter++)
    22b2:	18 8a       	std	Y+16, r1	; 0x10
    22b4:	d0 c0       	rjmp	.+416    	; 0x2456 <HKPD_u8GetPressedKey+0x1cc>
        {
            MDIO_u8SetPinValue(HKPD_ROWS_PORT, HKPD_AU8RowsPins[Local_u8RowCounter], MDIO_LOW);
    22b6:	88 89       	ldd	r24, Y+16	; 0x10
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	fc 01       	movw	r30, r24
    22be:	e8 59       	subi	r30, 0x98	; 152
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	90 81       	ld	r25, Z
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	69 2f       	mov	r22, r25
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	0e 94 c8 08 	call	0x1190	; 0x1190 <MDIO_u8SetPinValue>
            /* Check Cols*/
            for (Local_u8ColCounter = 0; Local_u8ColCounter < 4; Local_u8ColCounter++)
    22ce:	1f 86       	std	Y+15, r1	; 0x0f
    22d0:	af c0       	rjmp	.+350    	; 0x2430 <HKPD_u8GetPressedKey+0x1a6>
            {
                MDIO_u8GetPinValue(HKPD_COLS_PORT, HKPD_AU8ColsPins[Local_u8ColCounter], &Local_u8PinValue);
    22d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d4:	88 2f       	mov	r24, r24
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	fc 01       	movw	r30, r24
    22da:	e4 59       	subi	r30, 0x94	; 148
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	90 81       	ld	r25, Z
    22e0:	9e 01       	movw	r18, r28
    22e2:	2e 5e       	subi	r18, 0xEE	; 238
    22e4:	3f 4f       	sbci	r19, 0xFF	; 255
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	69 2f       	mov	r22, r25
    22ea:	a9 01       	movw	r20, r18
    22ec:	0e 94 19 0a 	call	0x1432	; 0x1432 <MDIO_u8GetPinValue>
                if (Local_u8PinValue == MDIO_LOW)
    22f0:	8a 89       	ldd	r24, Y+18	; 0x12
    22f2:	88 23       	and	r24, r24
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <HKPD_u8GetPressedKey+0x6e>
    22f6:	99 c0       	rjmp	.+306    	; 0x242a <HKPD_u8GetPressedKey+0x1a0>
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	a0 ea       	ldi	r26, 0xA0	; 160
    22fe:	b1 e4       	ldi	r27, 0x41	; 65
    2300:	8b 87       	std	Y+11, r24	; 0x0b
    2302:	9c 87       	std	Y+12, r25	; 0x0c
    2304:	ad 87       	std	Y+13, r26	; 0x0d
    2306:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2308:	6b 85       	ldd	r22, Y+11	; 0x0b
    230a:	7c 85       	ldd	r23, Y+12	; 0x0c
    230c:	8d 85       	ldd	r24, Y+13	; 0x0d
    230e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	4a ef       	ldi	r20, 0xFA	; 250
    2316:	54 e4       	ldi	r21, 0x44	; 68
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8f 83       	std	Y+7, r24	; 0x07
    2322:	98 87       	std	Y+8, r25	; 0x08
    2324:	a9 87       	std	Y+9, r26	; 0x09
    2326:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2328:	6f 81       	ldd	r22, Y+7	; 0x07
    232a:	78 85       	ldd	r23, Y+8	; 0x08
    232c:	89 85       	ldd	r24, Y+9	; 0x09
    232e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e8       	ldi	r20, 0x80	; 128
    2336:	5f e3       	ldi	r21, 0x3F	; 63
    2338:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    233c:	88 23       	and	r24, r24
    233e:	2c f4       	brge	.+10     	; 0x234a <HKPD_u8GetPressedKey+0xc0>
		__ticks = 1;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9e 83       	std	Y+6, r25	; 0x06
    2346:	8d 83       	std	Y+5, r24	; 0x05
    2348:	3f c0       	rjmp	.+126    	; 0x23c8 <HKPD_u8GetPressedKey+0x13e>
	else if (__tmp > 65535)
    234a:	6f 81       	ldd	r22, Y+7	; 0x07
    234c:	78 85       	ldd	r23, Y+8	; 0x08
    234e:	89 85       	ldd	r24, Y+9	; 0x09
    2350:	9a 85       	ldd	r25, Y+10	; 0x0a
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	3f ef       	ldi	r19, 0xFF	; 255
    2356:	4f e7       	ldi	r20, 0x7F	; 127
    2358:	57 e4       	ldi	r21, 0x47	; 71
    235a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    235e:	18 16       	cp	r1, r24
    2360:	4c f5       	brge	.+82     	; 0x23b4 <HKPD_u8GetPressedKey+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2362:	6b 85       	ldd	r22, Y+11	; 0x0b
    2364:	7c 85       	ldd	r23, Y+12	; 0x0c
    2366:	8d 85       	ldd	r24, Y+13	; 0x0d
    2368:	9e 85       	ldd	r25, Y+14	; 0x0e
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e2       	ldi	r20, 0x20	; 32
    2370:	51 e4       	ldi	r21, 0x41	; 65
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	bc 01       	movw	r22, r24
    237c:	cd 01       	movw	r24, r26
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
    238a:	0f c0       	rjmp	.+30     	; 0x23aa <HKPD_u8GetPressedKey+0x120>
    238c:	88 ec       	ldi	r24, 0xC8	; 200
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	8b 83       	std	Y+3, r24	; 0x03
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <HKPD_u8GetPressedKey+0x10e>
    239c:	9c 83       	std	Y+4, r25	; 0x04
    239e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a0:	8d 81       	ldd	r24, Y+5	; 0x05
    23a2:	9e 81       	ldd	r25, Y+6	; 0x06
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	9e 83       	std	Y+6, r25	; 0x06
    23a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23aa:	8d 81       	ldd	r24, Y+5	; 0x05
    23ac:	9e 81       	ldd	r25, Y+6	; 0x06
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	69 f7       	brne	.-38     	; 0x238c <HKPD_u8GetPressedKey+0x102>
    23b2:	24 c0       	rjmp	.+72     	; 0x23fc <HKPD_u8GetPressedKey+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
    23c8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ca:	9e 81       	ldd	r25, Y+6	; 0x06
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	9a 81       	ldd	r25, Y+2	; 0x02
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <HKPD_u8GetPressedKey+0x14a>
    23d8:	9a 83       	std	Y+2, r25	; 0x02
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <HKPD_u8GetPressedKey+0x172>

                    _delay_ms(20);
                    /*wait the user until switch */
                    while (Local_u8PinValue == MDIO_LOW)
                    {
                        MDIO_u8GetPinValue(HKPD_COLS_PORT, HKPD_AU8ColsPins[Local_u8ColCounter], &Local_u8PinValue);
    23de:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e0:	88 2f       	mov	r24, r24
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	fc 01       	movw	r30, r24
    23e6:	e4 59       	subi	r30, 0x94	; 148
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	90 81       	ld	r25, Z
    23ec:	9e 01       	movw	r18, r28
    23ee:	2e 5e       	subi	r18, 0xEE	; 238
    23f0:	3f 4f       	sbci	r19, 0xFF	; 255
    23f2:	82 e0       	ldi	r24, 0x02	; 2
    23f4:	69 2f       	mov	r22, r25
    23f6:	a9 01       	movw	r20, r18
    23f8:	0e 94 19 0a 	call	0x1432	; 0x1432 <MDIO_u8GetPinValue>
                if (Local_u8PinValue == MDIO_LOW)
                {

                    _delay_ms(20);
                    /*wait the user until switch */
                    while (Local_u8PinValue == MDIO_LOW)
    23fc:	8a 89       	ldd	r24, Y+18	; 0x12
    23fe:	88 23       	and	r24, r24
    2400:	71 f3       	breq	.-36     	; 0x23de <HKPD_u8GetPressedKey+0x154>
                    {
                        MDIO_u8GetPinValue(HKPD_COLS_PORT, HKPD_AU8ColsPins[Local_u8ColCounter], &Local_u8PinValue);
                    }
                    *Copy_u8KeyPressed = HKPD_Au8Keys[Local_u8RowCounter][Local_u8ColCounter];
    2402:	88 89       	ldd	r24, Y+16	; 0x10
    2404:	48 2f       	mov	r20, r24
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	8f 85       	ldd	r24, Y+15	; 0x0f
    240a:	28 2f       	mov	r18, r24
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	ca 01       	movw	r24, r20
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	82 0f       	add	r24, r18
    241a:	93 1f       	adc	r25, r19
    241c:	fc 01       	movw	r30, r24
    241e:	e0 59       	subi	r30, 0x90	; 144
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	80 81       	ld	r24, Z
    2424:	eb 89       	ldd	r30, Y+19	; 0x13
    2426:	fc 89       	ldd	r31, Y+20	; 0x14
    2428:	80 83       	st	Z, r24
        //*Copy_u8KeyPressed = HKPD_NO_KEY_PRESSED;
        for (Local_u8RowCounter = 0; Local_u8RowCounter < 4; Local_u8RowCounter++)
        {
            MDIO_u8SetPinValue(HKPD_ROWS_PORT, HKPD_AU8RowsPins[Local_u8RowCounter], MDIO_LOW);
            /* Check Cols*/
            for (Local_u8ColCounter = 0; Local_u8ColCounter < 4; Local_u8ColCounter++)
    242a:	8f 85       	ldd	r24, Y+15	; 0x0f
    242c:	8f 5f       	subi	r24, 0xFF	; 255
    242e:	8f 87       	std	Y+15, r24	; 0x0f
    2430:	8f 85       	ldd	r24, Y+15	; 0x0f
    2432:	84 30       	cpi	r24, 0x04	; 4
    2434:	08 f4       	brcc	.+2      	; 0x2438 <HKPD_u8GetPressedKey+0x1ae>
    2436:	4d cf       	rjmp	.-358    	; 0x22d2 <HKPD_u8GetPressedKey+0x48>
                    *Copy_u8KeyPressed = HKPD_Au8Keys[Local_u8RowCounter][Local_u8ColCounter];
                }

            }
            /*Deactivate Current Row*/
            MDIO_u8SetPinValue(HKPD_ROWS_PORT, HKPD_AU8RowsPins[Local_u8RowCounter], MDIO_HIGH);
    2438:	88 89       	ldd	r24, Y+16	; 0x10
    243a:	88 2f       	mov	r24, r24
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	fc 01       	movw	r30, r24
    2440:	e8 59       	subi	r30, 0x98	; 152
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	90 81       	ld	r25, Z
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	69 2f       	mov	r22, r25
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	0e 94 c8 08 	call	0x1190	; 0x1190 <MDIO_u8SetPinValue>
    u8 Local_u8PinValue;
    if (Copy_u8KeyPressed != STD_TYPE_POINTER_NULL)
    {
        Local_u8ErrorState = STD_TYPE_OK;
        //*Copy_u8KeyPressed = HKPD_NO_KEY_PRESSED;
        for (Local_u8RowCounter = 0; Local_u8RowCounter < 4; Local_u8RowCounter++)
    2450:	88 89       	ldd	r24, Y+16	; 0x10
    2452:	8f 5f       	subi	r24, 0xFF	; 255
    2454:	88 8b       	std	Y+16, r24	; 0x10
    2456:	88 89       	ldd	r24, Y+16	; 0x10
    2458:	84 30       	cpi	r24, 0x04	; 4
    245a:	08 f4       	brcc	.+2      	; 0x245e <HKPD_u8GetPressedKey+0x1d4>
    245c:	2c cf       	rjmp	.-424    	; 0x22b6 <HKPD_u8GetPressedKey+0x2c>
            /*Deactivate Current Row*/
            MDIO_u8SetPinValue(HKPD_ROWS_PORT, HKPD_AU8RowsPins[Local_u8RowCounter], MDIO_HIGH);
        }
    }

    return Local_u8ErrorState;
    245e:	89 89       	ldd	r24, Y+17	; 0x11
}
    2460:	64 96       	adiw	r28, 0x14	; 20
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <main>:
void converge_diverge_leds();

u8 pressedKey;

int main(void)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	00 d0       	rcall	.+0      	; 0x2478 <main+0x6>
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    // Initialize the MDIO and LCD
    MDIO_IntialPins();  // Initialize all necessary pins (assuming this function sets up ports and pins)
    247c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MDIO_IntialPins>
    HLCD_VoidLcdIint(); // Initialize the LCD
    2480:	0e 94 0e 0b 	call	0x161c	; 0x161c <HLCD_VoidLcdIint>

    while (1)
    {
        HKPD_u8GetPressedKey(&pressedKey); // Get the pressed key from the keypad
    2484:	80 e8       	ldi	r24, 0x80	; 128
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	0e 94 45 11 	call	0x228a	; 0x228a <HKPD_u8GetPressedKey>

        switch (pressedKey)
    248c:	80 91 80 00 	lds	r24, 0x0080
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	3a 83       	std	Y+2, r19	; 0x02
    2496:	29 83       	std	Y+1, r18	; 0x01
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	9a 81       	ldd	r25, Y+2	; 0x02
    249c:	84 33       	cpi	r24, 0x34	; 52
    249e:	91 05       	cpc	r25, r1
    24a0:	99 f1       	breq	.+102    	; 0x2508 <main+0x96>
    24a2:	29 81       	ldd	r18, Y+1	; 0x01
    24a4:	3a 81       	ldd	r19, Y+2	; 0x02
    24a6:	25 33       	cpi	r18, 0x35	; 53
    24a8:	31 05       	cpc	r19, r1
    24aa:	84 f4       	brge	.+32     	; 0x24cc <main+0x5a>
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	82 33       	cpi	r24, 0x32	; 50
    24b2:	91 05       	cpc	r25, r1
    24b4:	19 f1       	breq	.+70     	; 0x24fc <main+0x8a>
    24b6:	29 81       	ldd	r18, Y+1	; 0x01
    24b8:	3a 81       	ldd	r19, Y+2	; 0x02
    24ba:	23 33       	cpi	r18, 0x33	; 51
    24bc:	31 05       	cpc	r19, r1
    24be:	0c f5       	brge	.+66     	; 0x2502 <main+0x90>
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	81 33       	cpi	r24, 0x31	; 49
    24c6:	91 05       	cpc	r25, r1
    24c8:	b1 f0       	breq	.+44     	; 0x24f6 <main+0x84>
    24ca:	2d c0       	rjmp	.+90     	; 0x2526 <main+0xb4>
    24cc:	29 81       	ldd	r18, Y+1	; 0x01
    24ce:	3a 81       	ldd	r19, Y+2	; 0x02
    24d0:	26 33       	cpi	r18, 0x36	; 54
    24d2:	31 05       	cpc	r19, r1
    24d4:	f9 f0       	breq	.+62     	; 0x2514 <main+0xa2>
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	9a 81       	ldd	r25, Y+2	; 0x02
    24da:	86 33       	cpi	r24, 0x36	; 54
    24dc:	91 05       	cpc	r25, r1
    24de:	bc f0       	brlt	.+46     	; 0x250e <main+0x9c>
    24e0:	29 81       	ldd	r18, Y+1	; 0x01
    24e2:	3a 81       	ldd	r19, Y+2	; 0x02
    24e4:	27 33       	cpi	r18, 0x37	; 55
    24e6:	31 05       	cpc	r19, r1
    24e8:	c1 f0       	breq	.+48     	; 0x251a <main+0xa8>
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	9a 81       	ldd	r25, Y+2	; 0x02
    24ee:	88 33       	cpi	r24, 0x38	; 56
    24f0:	91 05       	cpc	r25, r1
    24f2:	b1 f0       	breq	.+44     	; 0x2520 <main+0xae>
    24f4:	18 c0       	rjmp	.+48     	; 0x2526 <main+0xb4>
        {
        case '1':
            flash_leds(); // Call flash_leds when '1' is pressed
    24f6:	0e 94 98 12 	call	0x2530	; 0x2530 <flash_leds>
    24fa:	c4 cf       	rjmp	.-120    	; 0x2484 <main+0x12>
            break;
        case '2':
            shift_left(); // Placeholder for the shift_left function
    24fc:	0e 94 a4 13 	call	0x2748	; 0x2748 <shift_left>
    2500:	c1 cf       	rjmp	.-126    	; 0x2484 <main+0x12>
            break;
        case '3':
            shift_right(); // Placeholder for the shift_right function
    2502:	0e 94 4e 14 	call	0x289c	; 0x289c <shift_right>
    2506:	be cf       	rjmp	.-132    	; 0x2484 <main+0x12>
            break;
        case '4':
            converge_leds(); // Placeholder for the converge_leds function
    2508:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <converge_leds>
    250c:	bb cf       	rjmp	.-138    	; 0x2484 <main+0x12>
            break;
        case '5':
            diverge_leds(); // Placeholder for the diverge_leds function
    250e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <diverge_leds>
    2512:	b8 cf       	rjmp	.-144    	; 0x2484 <main+0x12>
            break;
        case '6':
            ping_pong(); // Placeholder for the ping_pong function
    2514:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <ping_pong>
    2518:	b5 cf       	rjmp	.-150    	; 0x2484 <main+0x12>
            break;
        case '7':
            snake_effect(); // Placeholder for the snake_effect function
    251a:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <snake_effect>
    251e:	b2 cf       	rjmp	.-156    	; 0x2484 <main+0x12>
            break;
        case '8':
            converge_diverge_leds(); // Placeholder for the converge_diverge_leds function
    2520:	0e 94 e6 18 	call	0x31cc	; 0x31cc <converge_diverge_leds>
    2524:	af cf       	rjmp	.-162    	; 0x2484 <main+0x12>
            break;
        default:
            MDIO_u8SetPortValue(MDIO_PORTB, 0x00); // Turn off all LEDs if no valid key is pressed
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    252e:	aa cf       	rjmp	.-172    	; 0x2484 <main+0x12>

00002530 <flash_leds>:
    }

}

void flash_leds()
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	6c 97       	sbiw	r28, 0x1c	; 28
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
    while (1)
    {
        MDIO_u8SetPortValue(MDIO_PORTB, 0xFF); // Turn on all LEDs
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	6f ef       	ldi	r22, 0xFF	; 255
    2548:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	aa ef       	ldi	r26, 0xFA	; 250
    2552:	b3 e4       	ldi	r27, 0x43	; 67
    2554:	89 8f       	std	Y+25, r24	; 0x19
    2556:	9a 8f       	std	Y+26, r25	; 0x1a
    2558:	ab 8f       	std	Y+27, r26	; 0x1b
    255a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255c:	69 8d       	ldd	r22, Y+25	; 0x19
    255e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2560:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2562:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	4a ef       	ldi	r20, 0xFA	; 250
    256a:	54 e4       	ldi	r21, 0x44	; 68
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	8d 8b       	std	Y+21, r24	; 0x15
    2576:	9e 8b       	std	Y+22, r25	; 0x16
    2578:	af 8b       	std	Y+23, r26	; 0x17
    257a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    257c:	6d 89       	ldd	r22, Y+21	; 0x15
    257e:	7e 89       	ldd	r23, Y+22	; 0x16
    2580:	8f 89       	ldd	r24, Y+23	; 0x17
    2582:	98 8d       	ldd	r25, Y+24	; 0x18
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e8       	ldi	r20, 0x80	; 128
    258a:	5f e3       	ldi	r21, 0x3F	; 63
    258c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2590:	88 23       	and	r24, r24
    2592:	2c f4       	brge	.+10     	; 0x259e <flash_leds+0x6e>
		__ticks = 1;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	9c 8b       	std	Y+20, r25	; 0x14
    259a:	8b 8b       	std	Y+19, r24	; 0x13
    259c:	3f c0       	rjmp	.+126    	; 0x261c <flash_leds+0xec>
	else if (__tmp > 65535)
    259e:	6d 89       	ldd	r22, Y+21	; 0x15
    25a0:	7e 89       	ldd	r23, Y+22	; 0x16
    25a2:	8f 89       	ldd	r24, Y+23	; 0x17
    25a4:	98 8d       	ldd	r25, Y+24	; 0x18
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	3f ef       	ldi	r19, 0xFF	; 255
    25aa:	4f e7       	ldi	r20, 0x7F	; 127
    25ac:	57 e4       	ldi	r21, 0x47	; 71
    25ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b2:	18 16       	cp	r1, r24
    25b4:	4c f5       	brge	.+82     	; 0x2608 <flash_leds+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b6:	69 8d       	ldd	r22, Y+25	; 0x19
    25b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e2       	ldi	r20, 0x20	; 32
    25c4:	51 e4       	ldi	r21, 0x41	; 65
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9c 8b       	std	Y+20, r25	; 0x14
    25dc:	8b 8b       	std	Y+19, r24	; 0x13
    25de:	0f c0       	rjmp	.+30     	; 0x25fe <flash_leds+0xce>
    25e0:	88 ec       	ldi	r24, 0xC8	; 200
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	9a 8b       	std	Y+18, r25	; 0x12
    25e6:	89 8b       	std	Y+17, r24	; 0x11
    25e8:	89 89       	ldd	r24, Y+17	; 0x11
    25ea:	9a 89       	ldd	r25, Y+18	; 0x12
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <flash_leds+0xbc>
    25f0:	9a 8b       	std	Y+18, r25	; 0x12
    25f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f4:	8b 89       	ldd	r24, Y+19	; 0x13
    25f6:	9c 89       	ldd	r25, Y+20	; 0x14
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	9c 8b       	std	Y+20, r25	; 0x14
    25fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2600:	9c 89       	ldd	r25, Y+20	; 0x14
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	69 f7       	brne	.-38     	; 0x25e0 <flash_leds+0xb0>
    2606:	14 c0       	rjmp	.+40     	; 0x2630 <flash_leds+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2608:	6d 89       	ldd	r22, Y+21	; 0x15
    260a:	7e 89       	ldd	r23, Y+22	; 0x16
    260c:	8f 89       	ldd	r24, Y+23	; 0x17
    260e:	98 8d       	ldd	r25, Y+24	; 0x18
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	9c 8b       	std	Y+20, r25	; 0x14
    261a:	8b 8b       	std	Y+19, r24	; 0x13
    261c:	8b 89       	ldd	r24, Y+19	; 0x13
    261e:	9c 89       	ldd	r25, Y+20	; 0x14
    2620:	98 8b       	std	Y+16, r25	; 0x10
    2622:	8f 87       	std	Y+15, r24	; 0x0f
    2624:	8f 85       	ldd	r24, Y+15	; 0x0f
    2626:	98 89       	ldd	r25, Y+16	; 0x10
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <flash_leds+0xf8>
    262c:	98 8b       	std	Y+16, r25	; 0x10
    262e:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(500);
        MDIO_u8SetPortValue(MDIO_PORTB, 0x00); // Turn off all LEDs
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	aa ef       	ldi	r26, 0xFA	; 250
    263e:	b3 e4       	ldi	r27, 0x43	; 67
    2640:	8b 87       	std	Y+11, r24	; 0x0b
    2642:	9c 87       	std	Y+12, r25	; 0x0c
    2644:	ad 87       	std	Y+13, r26	; 0x0d
    2646:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2648:	6b 85       	ldd	r22, Y+11	; 0x0b
    264a:	7c 85       	ldd	r23, Y+12	; 0x0c
    264c:	8d 85       	ldd	r24, Y+13	; 0x0d
    264e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	4a ef       	ldi	r20, 0xFA	; 250
    2656:	54 e4       	ldi	r21, 0x44	; 68
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	8f 83       	std	Y+7, r24	; 0x07
    2662:	98 87       	std	Y+8, r25	; 0x08
    2664:	a9 87       	std	Y+9, r26	; 0x09
    2666:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2668:	6f 81       	ldd	r22, Y+7	; 0x07
    266a:	78 85       	ldd	r23, Y+8	; 0x08
    266c:	89 85       	ldd	r24, Y+9	; 0x09
    266e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e8       	ldi	r20, 0x80	; 128
    2676:	5f e3       	ldi	r21, 0x3F	; 63
    2678:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267c:	88 23       	and	r24, r24
    267e:	2c f4       	brge	.+10     	; 0x268a <flash_leds+0x15a>
		__ticks = 1;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9e 83       	std	Y+6, r25	; 0x06
    2686:	8d 83       	std	Y+5, r24	; 0x05
    2688:	3f c0       	rjmp	.+126    	; 0x2708 <flash_leds+0x1d8>
	else if (__tmp > 65535)
    268a:	6f 81       	ldd	r22, Y+7	; 0x07
    268c:	78 85       	ldd	r23, Y+8	; 0x08
    268e:	89 85       	ldd	r24, Y+9	; 0x09
    2690:	9a 85       	ldd	r25, Y+10	; 0x0a
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	3f ef       	ldi	r19, 0xFF	; 255
    2696:	4f e7       	ldi	r20, 0x7F	; 127
    2698:	57 e4       	ldi	r21, 0x47	; 71
    269a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    269e:	18 16       	cp	r1, r24
    26a0:	4c f5       	brge	.+82     	; 0x26f4 <flash_leds+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e2       	ldi	r20, 0x20	; 32
    26b0:	51 e4       	ldi	r21, 0x41	; 65
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	bc 01       	movw	r22, r24
    26bc:	cd 01       	movw	r24, r26
    26be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	9e 83       	std	Y+6, r25	; 0x06
    26c8:	8d 83       	std	Y+5, r24	; 0x05
    26ca:	0f c0       	rjmp	.+30     	; 0x26ea <flash_leds+0x1ba>
    26cc:	88 ec       	ldi	r24, 0xC8	; 200
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	9c 83       	std	Y+4, r25	; 0x04
    26d2:	8b 83       	std	Y+3, r24	; 0x03
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	9c 81       	ldd	r25, Y+4	; 0x04
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <flash_leds+0x1a8>
    26dc:	9c 83       	std	Y+4, r25	; 0x04
    26de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	9e 81       	ldd	r25, Y+6	; 0x06
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	9e 83       	std	Y+6, r25	; 0x06
    26e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	69 f7       	brne	.-38     	; 0x26cc <flash_leds+0x19c>
    26f2:	14 c0       	rjmp	.+40     	; 0x271c <flash_leds+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f4:	6f 81       	ldd	r22, Y+7	; 0x07
    26f6:	78 85       	ldd	r23, Y+8	; 0x08
    26f8:	89 85       	ldd	r24, Y+9	; 0x09
    26fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	9e 83       	std	Y+6, r25	; 0x06
    2706:	8d 83       	std	Y+5, r24	; 0x05
    2708:	8d 81       	ldd	r24, Y+5	; 0x05
    270a:	9e 81       	ldd	r25, Y+6	; 0x06
    270c:	9a 83       	std	Y+2, r25	; 0x02
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <flash_leds+0x1e4>
    2718:	9a 83       	std	Y+2, r25	; 0x02
    271a:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);

        HKPD_u8GetPressedKey(&pressedKey); // Continuously check for a key press
    271c:	80 e8       	ldi	r24, 0x80	; 128
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	0e 94 45 11 	call	0x228a	; 0x228a <HKPD_u8GetPressedKey>
        if (pressedKey != '1')
    2724:	80 91 80 00 	lds	r24, 0x0080
    2728:	81 33       	cpi	r24, 0x31	; 49
    272a:	09 f4       	brne	.+2      	; 0x272e <flash_leds+0x1fe>
    272c:	0b cf       	rjmp	.-490    	; 0x2544 <flash_leds+0x14>
            break; // Exit the loop if any key other than '1' is pressed
        }
    }

    // After the loop exits, turn off all LEDs
    MDIO_u8SetPortValue(MDIO_PORTB, 0x00);
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
}
    2736:	6c 96       	adiw	r28, 0x1c	; 28
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	08 95       	ret

00002748 <shift_left>:


void shift_left()
{
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	2f 97       	sbiw	r28, 0x0f	; 15
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    while (1)
    {
        // Iterate from bit 0 to bit 7
        for (u8 i = 0; i < 8; i++)
    275c:	1f 86       	std	Y+15, r1	; 0x0f
    275e:	99 c0       	rjmp	.+306    	; 0x2892 <shift_left+0x14a>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i)); // Shift the LED to the left
    2760:	8f 85       	ldd	r24, Y+15	; 0x0f
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <shift_left+0x28>
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	2a 95       	dec	r18
    2772:	e2 f7       	brpl	.-8      	; 0x276c <shift_left+0x24>
    2774:	98 2f       	mov	r25, r24
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	69 2f       	mov	r22, r25
    277a:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	aa e7       	ldi	r26, 0x7A	; 122
    2784:	b3 e4       	ldi	r27, 0x43	; 67
    2786:	8b 87       	std	Y+11, r24	; 0x0b
    2788:	9c 87       	std	Y+12, r25	; 0x0c
    278a:	ad 87       	std	Y+13, r26	; 0x0d
    278c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2790:	7c 85       	ldd	r23, Y+12	; 0x0c
    2792:	8d 85       	ldd	r24, Y+13	; 0x0d
    2794:	9e 85       	ldd	r25, Y+14	; 0x0e
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	4a ef       	ldi	r20, 0xFA	; 250
    279c:	54 e4       	ldi	r21, 0x44	; 68
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	8f 83       	std	Y+7, r24	; 0x07
    27a8:	98 87       	std	Y+8, r25	; 0x08
    27aa:	a9 87       	std	Y+9, r26	; 0x09
    27ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ae:	6f 81       	ldd	r22, Y+7	; 0x07
    27b0:	78 85       	ldd	r23, Y+8	; 0x08
    27b2:	89 85       	ldd	r24, Y+9	; 0x09
    27b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e8       	ldi	r20, 0x80	; 128
    27bc:	5f e3       	ldi	r21, 0x3F	; 63
    27be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c2:	88 23       	and	r24, r24
    27c4:	2c f4       	brge	.+10     	; 0x27d0 <shift_left+0x88>
		__ticks = 1;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	9e 83       	std	Y+6, r25	; 0x06
    27cc:	8d 83       	std	Y+5, r24	; 0x05
    27ce:	3f c0       	rjmp	.+126    	; 0x284e <shift_left+0x106>
	else if (__tmp > 65535)
    27d0:	6f 81       	ldd	r22, Y+7	; 0x07
    27d2:	78 85       	ldd	r23, Y+8	; 0x08
    27d4:	89 85       	ldd	r24, Y+9	; 0x09
    27d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	3f ef       	ldi	r19, 0xFF	; 255
    27dc:	4f e7       	ldi	r20, 0x7F	; 127
    27de:	57 e4       	ldi	r21, 0x47	; 71
    27e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e4:	18 16       	cp	r1, r24
    27e6:	4c f5       	brge	.+82     	; 0x283a <shift_left+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e2       	ldi	r20, 0x20	; 32
    27f6:	51 e4       	ldi	r21, 0x41	; 65
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9e 83       	std	Y+6, r25	; 0x06
    280e:	8d 83       	std	Y+5, r24	; 0x05
    2810:	0f c0       	rjmp	.+30     	; 0x2830 <shift_left+0xe8>
    2812:	88 ec       	ldi	r24, 0xC8	; 200
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9c 83       	std	Y+4, r25	; 0x04
    2818:	8b 83       	std	Y+3, r24	; 0x03
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	9c 81       	ldd	r25, Y+4	; 0x04
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <shift_left+0xd6>
    2822:	9c 83       	std	Y+4, r25	; 0x04
    2824:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2826:	8d 81       	ldd	r24, Y+5	; 0x05
    2828:	9e 81       	ldd	r25, Y+6	; 0x06
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	9e 83       	std	Y+6, r25	; 0x06
    282e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2830:	8d 81       	ldd	r24, Y+5	; 0x05
    2832:	9e 81       	ldd	r25, Y+6	; 0x06
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	69 f7       	brne	.-38     	; 0x2812 <shift_left+0xca>
    2838:	14 c0       	rjmp	.+40     	; 0x2862 <shift_left+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283a:	6f 81       	ldd	r22, Y+7	; 0x07
    283c:	78 85       	ldd	r23, Y+8	; 0x08
    283e:	89 85       	ldd	r24, Y+9	; 0x09
    2840:	9a 85       	ldd	r25, Y+10	; 0x0a
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9e 83       	std	Y+6, r25	; 0x06
    284c:	8d 83       	std	Y+5, r24	; 0x05
    284e:	8d 81       	ldd	r24, Y+5	; 0x05
    2850:	9e 81       	ldd	r25, Y+6	; 0x06
    2852:	9a 83       	std	Y+2, r25	; 0x02
    2854:	89 83       	std	Y+1, r24	; 0x01
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	9a 81       	ldd	r25, Y+2	; 0x02
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <shift_left+0x112>
    285e:	9a 83       	std	Y+2, r25	; 0x02
    2860:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(250); // Delay between each shift

            HKPD_u8GetPressedKey(&pressedKey); // Continuously check for key press
    2862:	80 e8       	ldi	r24, 0x80	; 128
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	0e 94 45 11 	call	0x228a	; 0x228a <HKPD_u8GetPressedKey>
            if (pressedKey != '2') // If any key other than '2' is pressed
    286a:	80 91 80 00 	lds	r24, 0x0080
    286e:	82 33       	cpi	r24, 0x32	; 50
    2870:	69 f0       	breq	.+26     	; 0x288c <shift_left+0x144>
            {
                // Exit the loop
                MDIO_u8SetPortValue(MDIO_PORTB, 0x00); // Turn off all LEDs
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	60 e0       	ldi	r22, 0x00	; 0
    2876:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
                return; // Exit the function
            }
        }
    }
}
    287a:	2f 96       	adiw	r28, 0x0f	; 15
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret
void shift_left()
{
    while (1)
    {
        // Iterate from bit 0 to bit 7
        for (u8 i = 0; i < 8; i++)
    288c:	8f 85       	ldd	r24, Y+15	; 0x0f
    288e:	8f 5f       	subi	r24, 0xFF	; 255
    2890:	8f 87       	std	Y+15, r24	; 0x0f
    2892:	8f 85       	ldd	r24, Y+15	; 0x0f
    2894:	88 30       	cpi	r24, 0x08	; 8
    2896:	08 f4       	brcc	.+2      	; 0x289a <shift_left+0x152>
    2898:	63 cf       	rjmp	.-314    	; 0x2760 <shift_left+0x18>
    289a:	60 cf       	rjmp	.-320    	; 0x275c <shift_left+0x14>

0000289c <shift_right>:
        }
    }
}

void shift_right()
{
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	2f 97       	sbiw	r28, 0x0f	; 15
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    while (1)
    {
        // Iterate from bit 7 to bit 0
        for (int8_t i = 7; i >= 0; i--)
    28b0:	87 e0       	ldi	r24, 0x07	; 7
    28b2:	8f 87       	std	Y+15, r24	; 0x0f
    28b4:	9b c0       	rjmp	.+310    	; 0x29ec <shift_right+0x150>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i)); // Shift the LED to the right
    28b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b8:	28 2f       	mov	r18, r24
    28ba:	33 27       	eor	r19, r19
    28bc:	27 fd       	sbrc	r18, 7
    28be:	30 95       	com	r19
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <shift_right+0x2e>
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	2a 95       	dec	r18
    28cc:	e2 f7       	brpl	.-8      	; 0x28c6 <shift_right+0x2a>
    28ce:	98 2f       	mov	r25, r24
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	69 2f       	mov	r22, r25
    28d4:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	aa e7       	ldi	r26, 0x7A	; 122
    28de:	b3 e4       	ldi	r27, 0x43	; 67
    28e0:	8b 87       	std	Y+11, r24	; 0x0b
    28e2:	9c 87       	std	Y+12, r25	; 0x0c
    28e4:	ad 87       	std	Y+13, r26	; 0x0d
    28e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4a ef       	ldi	r20, 0xFA	; 250
    28f6:	54 e4       	ldi	r21, 0x44	; 68
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	8f 83       	std	Y+7, r24	; 0x07
    2902:	98 87       	std	Y+8, r25	; 0x08
    2904:	a9 87       	std	Y+9, r26	; 0x09
    2906:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2908:	6f 81       	ldd	r22, Y+7	; 0x07
    290a:	78 85       	ldd	r23, Y+8	; 0x08
    290c:	89 85       	ldd	r24, Y+9	; 0x09
    290e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    291c:	88 23       	and	r24, r24
    291e:	2c f4       	brge	.+10     	; 0x292a <shift_right+0x8e>
		__ticks = 1;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	3f c0       	rjmp	.+126    	; 0x29a8 <shift_right+0x10c>
	else if (__tmp > 65535)
    292a:	6f 81       	ldd	r22, Y+7	; 0x07
    292c:	78 85       	ldd	r23, Y+8	; 0x08
    292e:	89 85       	ldd	r24, Y+9	; 0x09
    2930:	9a 85       	ldd	r25, Y+10	; 0x0a
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	3f ef       	ldi	r19, 0xFF	; 255
    2936:	4f e7       	ldi	r20, 0x7F	; 127
    2938:	57 e4       	ldi	r21, 0x47	; 71
    293a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    293e:	18 16       	cp	r1, r24
    2940:	4c f5       	brge	.+82     	; 0x2994 <shift_right+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2942:	6b 85       	ldd	r22, Y+11	; 0x0b
    2944:	7c 85       	ldd	r23, Y+12	; 0x0c
    2946:	8d 85       	ldd	r24, Y+13	; 0x0d
    2948:	9e 85       	ldd	r25, Y+14	; 0x0e
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e2       	ldi	r20, 0x20	; 32
    2950:	51 e4       	ldi	r21, 0x41	; 65
    2952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	bc 01       	movw	r22, r24
    295c:	cd 01       	movw	r24, r26
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	0f c0       	rjmp	.+30     	; 0x298a <shift_right+0xee>
    296c:	88 ec       	ldi	r24, 0xC8	; 200
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9c 83       	std	Y+4, r25	; 0x04
    2972:	8b 83       	std	Y+3, r24	; 0x03
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	9c 81       	ldd	r25, Y+4	; 0x04
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <shift_right+0xdc>
    297c:	9c 83       	std	Y+4, r25	; 0x04
    297e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	9e 83       	std	Y+6, r25	; 0x06
    2988:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298a:	8d 81       	ldd	r24, Y+5	; 0x05
    298c:	9e 81       	ldd	r25, Y+6	; 0x06
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	69 f7       	brne	.-38     	; 0x296c <shift_right+0xd0>
    2992:	14 c0       	rjmp	.+40     	; 0x29bc <shift_right+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	9e 83       	std	Y+6, r25	; 0x06
    29a6:	8d 83       	std	Y+5, r24	; 0x05
    29a8:	8d 81       	ldd	r24, Y+5	; 0x05
    29aa:	9e 81       	ldd	r25, Y+6	; 0x06
    29ac:	9a 83       	std	Y+2, r25	; 0x02
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <shift_right+0x118>
    29b8:	9a 83       	std	Y+2, r25	; 0x02
    29ba:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(250); // Delay between each shift

            HKPD_u8GetPressedKey(&pressedKey); // Continuously check for key press
    29bc:	80 e8       	ldi	r24, 0x80	; 128
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0e 94 45 11 	call	0x228a	; 0x228a <HKPD_u8GetPressedKey>
            if (pressedKey != '3') // If any key other than '3' is pressed
    29c4:	80 91 80 00 	lds	r24, 0x0080
    29c8:	83 33       	cpi	r24, 0x33	; 51
    29ca:	69 f0       	breq	.+26     	; 0x29e6 <shift_right+0x14a>
            {
                // Exit the loop
                MDIO_u8SetPortValue(MDIO_PORTB, 0x00); // Turn off all LEDs
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
                return; // Exit the function
            }
        }
    }
}
    29d4:	2f 96       	adiw	r28, 0x0f	; 15
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	f8 94       	cli
    29da:	de bf       	out	0x3e, r29	; 62
    29dc:	0f be       	out	0x3f, r0	; 63
    29de:	cd bf       	out	0x3d, r28	; 61
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	08 95       	ret
void shift_right()
{
    while (1)
    {
        // Iterate from bit 7 to bit 0
        for (int8_t i = 7; i >= 0; i--)
    29e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e8:	81 50       	subi	r24, 0x01	; 1
    29ea:	8f 87       	std	Y+15, r24	; 0x0f
    29ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ee:	88 23       	and	r24, r24
    29f0:	0c f0       	brlt	.+2      	; 0x29f4 <shift_right+0x158>
    29f2:	61 cf       	rjmp	.-318    	; 0x28b6 <shift_right+0x1a>
    29f4:	5d cf       	rjmp	.-326    	; 0x28b0 <shift_right+0x14>

000029f6 <converge_leds>:
            }
        }
    }
}
void converge_leds()
{
    29f6:	df 93       	push	r29
    29f8:	cf 93       	push	r28
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	2f 97       	sbiw	r28, 0x0f	; 15
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    while (1)
    {
        for (u8 i = 0; i < 4; i++)
    2a0a:	1f 86       	std	Y+15, r1	; 0x0f
    2a0c:	ab c0       	rjmp	.+342    	; 0x2b64 <converge_leds+0x16e>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i) | (1 << (7 - i))); // Converging LEDs
    2a0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a10:	28 2f       	mov	r18, r24
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <converge_leds+0x28>
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	2a 95       	dec	r18
    2a20:	e2 f7       	brpl	.-8      	; 0x2a1a <converge_leds+0x24>
    2a22:	48 2f       	mov	r20, r24
    2a24:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a26:	28 2f       	mov	r18, r24
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	87 e0       	ldi	r24, 0x07	; 7
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	bc 01       	movw	r22, r24
    2a30:	62 1b       	sub	r22, r18
    2a32:	73 0b       	sbc	r23, r19
    2a34:	9b 01       	movw	r18, r22
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <converge_leds+0x4a>
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	2a 95       	dec	r18
    2a42:	e2 f7       	brpl	.-8      	; 0x2a3c <converge_leds+0x46>
    2a44:	84 2b       	or	r24, r20
    2a46:	98 2f       	mov	r25, r24
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	69 2f       	mov	r22, r25
    2a4c:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	a6 e9       	ldi	r26, 0x96	; 150
    2a56:	b3 e4       	ldi	r27, 0x43	; 67
    2a58:	8b 87       	std	Y+11, r24	; 0x0b
    2a5a:	9c 87       	std	Y+12, r25	; 0x0c
    2a5c:	ad 87       	std	Y+13, r26	; 0x0d
    2a5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	4a ef       	ldi	r20, 0xFA	; 250
    2a6e:	54 e4       	ldi	r21, 0x44	; 68
    2a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	8f 83       	std	Y+7, r24	; 0x07
    2a7a:	98 87       	std	Y+8, r25	; 0x08
    2a7c:	a9 87       	std	Y+9, r26	; 0x09
    2a7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a80:	6f 81       	ldd	r22, Y+7	; 0x07
    2a82:	78 85       	ldd	r23, Y+8	; 0x08
    2a84:	89 85       	ldd	r24, Y+9	; 0x09
    2a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e8       	ldi	r20, 0x80	; 128
    2a8e:	5f e3       	ldi	r21, 0x3F	; 63
    2a90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a94:	88 23       	and	r24, r24
    2a96:	2c f4       	brge	.+10     	; 0x2aa2 <converge_leds+0xac>
		__ticks = 1;
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	9e 83       	std	Y+6, r25	; 0x06
    2a9e:	8d 83       	std	Y+5, r24	; 0x05
    2aa0:	3f c0       	rjmp	.+126    	; 0x2b20 <converge_leds+0x12a>
	else if (__tmp > 65535)
    2aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa4:	78 85       	ldd	r23, Y+8	; 0x08
    2aa6:	89 85       	ldd	r24, Y+9	; 0x09
    2aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	3f ef       	ldi	r19, 0xFF	; 255
    2aae:	4f e7       	ldi	r20, 0x7F	; 127
    2ab0:	57 e4       	ldi	r21, 0x47	; 71
    2ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab6:	18 16       	cp	r1, r24
    2ab8:	4c f5       	brge	.+82     	; 0x2b0c <converge_leds+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2abc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e2       	ldi	r20, 0x20	; 32
    2ac8:	51 e4       	ldi	r21, 0x41	; 65
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	9e 83       	std	Y+6, r25	; 0x06
    2ae0:	8d 83       	std	Y+5, r24	; 0x05
    2ae2:	0f c0       	rjmp	.+30     	; 0x2b02 <converge_leds+0x10c>
    2ae4:	88 ec       	ldi	r24, 0xC8	; 200
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	9c 83       	std	Y+4, r25	; 0x04
    2aea:	8b 83       	std	Y+3, r24	; 0x03
    2aec:	8b 81       	ldd	r24, Y+3	; 0x03
    2aee:	9c 81       	ldd	r25, Y+4	; 0x04
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <converge_leds+0xfa>
    2af4:	9c 83       	std	Y+4, r25	; 0x04
    2af6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af8:	8d 81       	ldd	r24, Y+5	; 0x05
    2afa:	9e 81       	ldd	r25, Y+6	; 0x06
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	9e 83       	std	Y+6, r25	; 0x06
    2b00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b02:	8d 81       	ldd	r24, Y+5	; 0x05
    2b04:	9e 81       	ldd	r25, Y+6	; 0x06
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	69 f7       	brne	.-38     	; 0x2ae4 <converge_leds+0xee>
    2b0a:	14 c0       	rjmp	.+40     	; 0x2b34 <converge_leds+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b0e:	78 85       	ldd	r23, Y+8	; 0x08
    2b10:	89 85       	ldd	r24, Y+9	; 0x09
    2b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	9e 83       	std	Y+6, r25	; 0x06
    2b1e:	8d 83       	std	Y+5, r24	; 0x05
    2b20:	8d 81       	ldd	r24, Y+5	; 0x05
    2b22:	9e 81       	ldd	r25, Y+6	; 0x06
    2b24:	9a 83       	std	Y+2, r25	; 0x02
    2b26:	89 83       	std	Y+1, r24	; 0x01
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <converge_leds+0x136>
    2b30:	9a 83       	std	Y+2, r25	; 0x02
    2b32:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(300);

            HKPD_u8GetPressedKey(&pressedKey); // Continuously check for key press
    2b34:	80 e8       	ldi	r24, 0x80	; 128
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	0e 94 45 11 	call	0x228a	; 0x228a <HKPD_u8GetPressedKey>
            if (pressedKey != '4') // Exit if key is no longer '4'
    2b3c:	80 91 80 00 	lds	r24, 0x0080
    2b40:	84 33       	cpi	r24, 0x34	; 52
    2b42:	69 f0       	breq	.+26     	; 0x2b5e <converge_leds+0x168>
            {
                MDIO_u8SetPortValue(MDIO_PORTB, 0x00); // Turn off all LEDs
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	60 e0       	ldi	r22, 0x00	; 0
    2b48:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
                return; // Exit the function
            }
        }
    }
}
    2b4c:	2f 96       	adiw	r28, 0x0f	; 15
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	f8 94       	cli
    2b52:	de bf       	out	0x3e, r29	; 62
    2b54:	0f be       	out	0x3f, r0	; 63
    2b56:	cd bf       	out	0x3d, r28	; 61
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	08 95       	ret
}
void converge_leds()
{
    while (1)
    {
        for (u8 i = 0; i < 4; i++)
    2b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b60:	8f 5f       	subi	r24, 0xFF	; 255
    2b62:	8f 87       	std	Y+15, r24	; 0x0f
    2b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b66:	84 30       	cpi	r24, 0x04	; 4
    2b68:	08 f4       	brcc	.+2      	; 0x2b6c <converge_leds+0x176>
    2b6a:	51 cf       	rjmp	.-350    	; 0x2a0e <converge_leds+0x18>
    2b6c:	4e cf       	rjmp	.-356    	; 0x2a0a <converge_leds+0x14>

00002b6e <diverge_leds>:
        }
    }
}

void diverge_leds()
{
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	2f 97       	sbiw	r28, 0x0f	; 15
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	f8 94       	cli
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	cd bf       	out	0x3d, r28	; 61
    while (1)
    {
        for (int8_t i = 3; i >= 0; i--)
    2b82:	83 e0       	ldi	r24, 0x03	; 3
    2b84:	8f 87       	std	Y+15, r24	; 0x0f
    2b86:	af c0       	rjmp	.+350    	; 0x2ce6 <diverge_leds+0x178>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i) | (1 << (7 - i))); // Diverging LEDs
    2b88:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	33 27       	eor	r19, r19
    2b8e:	27 fd       	sbrc	r18, 7
    2b90:	30 95       	com	r19
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <diverge_leds+0x2e>
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	2a 95       	dec	r18
    2b9e:	e2 f7       	brpl	.-8      	; 0x2b98 <diverge_leds+0x2a>
    2ba0:	48 2f       	mov	r20, r24
    2ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	33 27       	eor	r19, r19
    2ba8:	27 fd       	sbrc	r18, 7
    2baa:	30 95       	com	r19
    2bac:	87 e0       	ldi	r24, 0x07	; 7
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	bc 01       	movw	r22, r24
    2bb2:	62 1b       	sub	r22, r18
    2bb4:	73 0b       	sbc	r23, r19
    2bb6:	9b 01       	movw	r18, r22
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <diverge_leds+0x54>
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	2a 95       	dec	r18
    2bc4:	e2 f7       	brpl	.-8      	; 0x2bbe <diverge_leds+0x50>
    2bc6:	84 2b       	or	r24, r20
    2bc8:	98 2f       	mov	r25, r24
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	69 2f       	mov	r22, r25
    2bce:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	a6 e9       	ldi	r26, 0x96	; 150
    2bd8:	b3 e4       	ldi	r27, 0x43	; 67
    2bda:	8b 87       	std	Y+11, r24	; 0x0b
    2bdc:	9c 87       	std	Y+12, r25	; 0x0c
    2bde:	ad 87       	std	Y+13, r26	; 0x0d
    2be0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	4a ef       	ldi	r20, 0xFA	; 250
    2bf0:	54 e4       	ldi	r21, 0x44	; 68
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	8f 83       	std	Y+7, r24	; 0x07
    2bfc:	98 87       	std	Y+8, r25	; 0x08
    2bfe:	a9 87       	std	Y+9, r26	; 0x09
    2c00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c02:	6f 81       	ldd	r22, Y+7	; 0x07
    2c04:	78 85       	ldd	r23, Y+8	; 0x08
    2c06:	89 85       	ldd	r24, Y+9	; 0x09
    2c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	40 e8       	ldi	r20, 0x80	; 128
    2c10:	5f e3       	ldi	r21, 0x3F	; 63
    2c12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c16:	88 23       	and	r24, r24
    2c18:	2c f4       	brge	.+10     	; 0x2c24 <diverge_leds+0xb6>
		__ticks = 1;
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	9e 83       	std	Y+6, r25	; 0x06
    2c20:	8d 83       	std	Y+5, r24	; 0x05
    2c22:	3f c0       	rjmp	.+126    	; 0x2ca2 <diverge_leds+0x134>
	else if (__tmp > 65535)
    2c24:	6f 81       	ldd	r22, Y+7	; 0x07
    2c26:	78 85       	ldd	r23, Y+8	; 0x08
    2c28:	89 85       	ldd	r24, Y+9	; 0x09
    2c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	3f ef       	ldi	r19, 0xFF	; 255
    2c30:	4f e7       	ldi	r20, 0x7F	; 127
    2c32:	57 e4       	ldi	r21, 0x47	; 71
    2c34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c38:	18 16       	cp	r1, r24
    2c3a:	4c f5       	brge	.+82     	; 0x2c8e <diverge_leds+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e2       	ldi	r20, 0x20	; 32
    2c4a:	51 e4       	ldi	r21, 0x41	; 65
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	bc 01       	movw	r22, r24
    2c56:	cd 01       	movw	r24, r26
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
    2c64:	0f c0       	rjmp	.+30     	; 0x2c84 <diverge_leds+0x116>
    2c66:	88 ec       	ldi	r24, 0xC8	; 200
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9c 83       	std	Y+4, r25	; 0x04
    2c6c:	8b 83       	std	Y+3, r24	; 0x03
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	9c 81       	ldd	r25, Y+4	; 0x04
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <diverge_leds+0x104>
    2c76:	9c 83       	std	Y+4, r25	; 0x04
    2c78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c84:	8d 81       	ldd	r24, Y+5	; 0x05
    2c86:	9e 81       	ldd	r25, Y+6	; 0x06
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	69 f7       	brne	.-38     	; 0x2c66 <diverge_leds+0xf8>
    2c8c:	14 c0       	rjmp	.+40     	; 0x2cb6 <diverge_leds+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c90:	78 85       	ldd	r23, Y+8	; 0x08
    2c92:	89 85       	ldd	r24, Y+9	; 0x09
    2c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9e 83       	std	Y+6, r25	; 0x06
    2ca0:	8d 83       	std	Y+5, r24	; 0x05
    2ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca6:	9a 83       	std	Y+2, r25	; 0x02
    2ca8:	89 83       	std	Y+1, r24	; 0x01
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	9a 81       	ldd	r25, Y+2	; 0x02
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <diverge_leds+0x140>
    2cb2:	9a 83       	std	Y+2, r25	; 0x02
    2cb4:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(300);

            HKPD_u8GetPressedKey(&pressedKey); // Continuously check for key press
    2cb6:	80 e8       	ldi	r24, 0x80	; 128
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	0e 94 45 11 	call	0x228a	; 0x228a <HKPD_u8GetPressedKey>
            if (pressedKey != '5') // Exit if key is no longer '5'
    2cbe:	80 91 80 00 	lds	r24, 0x0080
    2cc2:	85 33       	cpi	r24, 0x35	; 53
    2cc4:	69 f0       	breq	.+26     	; 0x2ce0 <diverge_leds+0x172>
            {
                MDIO_u8SetPortValue(MDIO_PORTB, 0x00); // Turn off all LEDs
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
                return; // Exit the function
            }
        }
    }
}
    2cce:	2f 96       	adiw	r28, 0x0f	; 15
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	f8 94       	cli
    2cd4:	de bf       	out	0x3e, r29	; 62
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	cd bf       	out	0x3d, r28	; 61
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

void diverge_leds()
{
    while (1)
    {
        for (int8_t i = 3; i >= 0; i--)
    2ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce2:	81 50       	subi	r24, 0x01	; 1
    2ce4:	8f 87       	std	Y+15, r24	; 0x0f
    2ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce8:	88 23       	and	r24, r24
    2cea:	0c f0       	brlt	.+2      	; 0x2cee <diverge_leds+0x180>
    2cec:	4d cf       	rjmp	.-358    	; 0x2b88 <diverge_leds+0x1a>
    2cee:	49 cf       	rjmp	.-366    	; 0x2b82 <diverge_leds+0x14>

00002cf0 <ping_pong>:
        }
    }
}

void ping_pong()
{
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	6e 97       	sbiw	r28, 0x1e	; 30
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    while (1)
    {
        // Moving right
        for (u8 i = 0; i < 8; i++)
    2d04:	1e 8e       	std	Y+30, r1	; 0x1e
    2d06:	84 c0       	rjmp	.+264    	; 0x2e10 <ping_pong+0x120>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i)); // LED shifts right
    2d08:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d0a:	28 2f       	mov	r18, r24
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <ping_pong+0x28>
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	2a 95       	dec	r18
    2d1a:	e2 f7       	brpl	.-8      	; 0x2d14 <ping_pong+0x24>
    2d1c:	98 2f       	mov	r25, r24
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	69 2f       	mov	r22, r25
    2d22:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	a6 e1       	ldi	r26, 0x16	; 22
    2d2c:	b3 e4       	ldi	r27, 0x43	; 67
    2d2e:	89 8f       	std	Y+25, r24	; 0x19
    2d30:	9a 8f       	std	Y+26, r25	; 0x1a
    2d32:	ab 8f       	std	Y+27, r26	; 0x1b
    2d34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d36:	69 8d       	ldd	r22, Y+25	; 0x19
    2d38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	4a ef       	ldi	r20, 0xFA	; 250
    2d44:	54 e4       	ldi	r21, 0x44	; 68
    2d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	8d 8b       	std	Y+21, r24	; 0x15
    2d50:	9e 8b       	std	Y+22, r25	; 0x16
    2d52:	af 8b       	std	Y+23, r26	; 0x17
    2d54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d56:	6d 89       	ldd	r22, Y+21	; 0x15
    2d58:	7e 89       	ldd	r23, Y+22	; 0x16
    2d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e8       	ldi	r20, 0x80	; 128
    2d64:	5f e3       	ldi	r21, 0x3F	; 63
    2d66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d6a:	88 23       	and	r24, r24
    2d6c:	2c f4       	brge	.+10     	; 0x2d78 <ping_pong+0x88>
		__ticks = 1;
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	9c 8b       	std	Y+20, r25	; 0x14
    2d74:	8b 8b       	std	Y+19, r24	; 0x13
    2d76:	3f c0       	rjmp	.+126    	; 0x2df6 <ping_pong+0x106>
	else if (__tmp > 65535)
    2d78:	6d 89       	ldd	r22, Y+21	; 0x15
    2d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	3f ef       	ldi	r19, 0xFF	; 255
    2d84:	4f e7       	ldi	r20, 0x7F	; 127
    2d86:	57 e4       	ldi	r21, 0x47	; 71
    2d88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d8c:	18 16       	cp	r1, r24
    2d8e:	4c f5       	brge	.+82     	; 0x2de2 <ping_pong+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d90:	69 8d       	ldd	r22, Y+25	; 0x19
    2d92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	40 e2       	ldi	r20, 0x20	; 32
    2d9e:	51 e4       	ldi	r21, 0x41	; 65
    2da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	bc 01       	movw	r22, r24
    2daa:	cd 01       	movw	r24, r26
    2dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	9c 8b       	std	Y+20, r25	; 0x14
    2db6:	8b 8b       	std	Y+19, r24	; 0x13
    2db8:	0f c0       	rjmp	.+30     	; 0x2dd8 <ping_pong+0xe8>
    2dba:	88 ec       	ldi	r24, 0xC8	; 200
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	9a 8b       	std	Y+18, r25	; 0x12
    2dc0:	89 8b       	std	Y+17, r24	; 0x11
    2dc2:	89 89       	ldd	r24, Y+17	; 0x11
    2dc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <ping_pong+0xd6>
    2dca:	9a 8b       	std	Y+18, r25	; 0x12
    2dcc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dce:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	9c 8b       	std	Y+20, r25	; 0x14
    2dd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dda:	9c 89       	ldd	r25, Y+20	; 0x14
    2ddc:	00 97       	sbiw	r24, 0x00	; 0
    2dde:	69 f7       	brne	.-38     	; 0x2dba <ping_pong+0xca>
    2de0:	14 c0       	rjmp	.+40     	; 0x2e0a <ping_pong+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de2:	6d 89       	ldd	r22, Y+21	; 0x15
    2de4:	7e 89       	ldd	r23, Y+22	; 0x16
    2de6:	8f 89       	ldd	r24, Y+23	; 0x17
    2de8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	9c 8b       	std	Y+20, r25	; 0x14
    2df4:	8b 8b       	std	Y+19, r24	; 0x13
    2df6:	8b 89       	ldd	r24, Y+19	; 0x13
    2df8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dfa:	98 8b       	std	Y+16, r25	; 0x10
    2dfc:	8f 87       	std	Y+15, r24	; 0x0f
    2dfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e00:	98 89       	ldd	r25, Y+16	; 0x10
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	f1 f7       	brne	.-4      	; 0x2e02 <ping_pong+0x112>
    2e06:	98 8b       	std	Y+16, r25	; 0x10
    2e08:	8f 87       	std	Y+15, r24	; 0x0f
void ping_pong()
{
    while (1)
    {
        // Moving right
        for (u8 i = 0; i < 8; i++)
    2e0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e0c:	8f 5f       	subi	r24, 0xFF	; 255
    2e0e:	8e 8f       	std	Y+30, r24	; 0x1e
    2e10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e12:	88 30       	cpi	r24, 0x08	; 8
    2e14:	08 f4       	brcc	.+2      	; 0x2e18 <ping_pong+0x128>
    2e16:	78 cf       	rjmp	.-272    	; 0x2d08 <ping_pong+0x18>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i)); // LED shifts right
            _delay_ms(150);
        }
        // Moving left
        for (int8_t i = 6; i >= 0; i--)
    2e18:	86 e0       	ldi	r24, 0x06	; 6
    2e1a:	8d 8f       	std	Y+29, r24	; 0x1d
    2e1c:	86 c0       	rjmp	.+268    	; 0x2f2a <ping_pong+0x23a>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i)); // LED shifts left
    2e1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e20:	28 2f       	mov	r18, r24
    2e22:	33 27       	eor	r19, r19
    2e24:	27 fd       	sbrc	r18, 7
    2e26:	30 95       	com	r19
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	02 c0       	rjmp	.+4      	; 0x2e32 <ping_pong+0x142>
    2e2e:	88 0f       	add	r24, r24
    2e30:	99 1f       	adc	r25, r25
    2e32:	2a 95       	dec	r18
    2e34:	e2 f7       	brpl	.-8      	; 0x2e2e <ping_pong+0x13e>
    2e36:	98 2f       	mov	r25, r24
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	69 2f       	mov	r22, r25
    2e3c:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	a6 e1       	ldi	r26, 0x16	; 22
    2e46:	b3 e4       	ldi	r27, 0x43	; 67
    2e48:	8b 87       	std	Y+11, r24	; 0x0b
    2e4a:	9c 87       	std	Y+12, r25	; 0x0c
    2e4c:	ad 87       	std	Y+13, r26	; 0x0d
    2e4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	4a ef       	ldi	r20, 0xFA	; 250
    2e5e:	54 e4       	ldi	r21, 0x44	; 68
    2e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	8f 83       	std	Y+7, r24	; 0x07
    2e6a:	98 87       	std	Y+8, r25	; 0x08
    2e6c:	a9 87       	std	Y+9, r26	; 0x09
    2e6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e70:	6f 81       	ldd	r22, Y+7	; 0x07
    2e72:	78 85       	ldd	r23, Y+8	; 0x08
    2e74:	89 85       	ldd	r24, Y+9	; 0x09
    2e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	40 e8       	ldi	r20, 0x80	; 128
    2e7e:	5f e3       	ldi	r21, 0x3F	; 63
    2e80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e84:	88 23       	and	r24, r24
    2e86:	2c f4       	brge	.+10     	; 0x2e92 <ping_pong+0x1a2>
		__ticks = 1;
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	9e 83       	std	Y+6, r25	; 0x06
    2e8e:	8d 83       	std	Y+5, r24	; 0x05
    2e90:	3f c0       	rjmp	.+126    	; 0x2f10 <ping_pong+0x220>
	else if (__tmp > 65535)
    2e92:	6f 81       	ldd	r22, Y+7	; 0x07
    2e94:	78 85       	ldd	r23, Y+8	; 0x08
    2e96:	89 85       	ldd	r24, Y+9	; 0x09
    2e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	3f ef       	ldi	r19, 0xFF	; 255
    2e9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ea0:	57 e4       	ldi	r21, 0x47	; 71
    2ea2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ea6:	18 16       	cp	r1, r24
    2ea8:	4c f5       	brge	.+82     	; 0x2efc <ping_pong+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e2       	ldi	r20, 0x20	; 32
    2eb8:	51 e4       	ldi	r21, 0x41	; 65
    2eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	bc 01       	movw	r22, r24
    2ec4:	cd 01       	movw	r24, r26
    2ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	9e 83       	std	Y+6, r25	; 0x06
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
    2ed2:	0f c0       	rjmp	.+30     	; 0x2ef2 <ping_pong+0x202>
    2ed4:	88 ec       	ldi	r24, 0xC8	; 200
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	9c 83       	std	Y+4, r25	; 0x04
    2eda:	8b 83       	std	Y+3, r24	; 0x03
    2edc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ede:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	f1 f7       	brne	.-4      	; 0x2ee0 <ping_pong+0x1f0>
    2ee4:	9c 83       	std	Y+4, r25	; 0x04
    2ee6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eea:	9e 81       	ldd	r25, Y+6	; 0x06
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	9e 83       	std	Y+6, r25	; 0x06
    2ef0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef6:	00 97       	sbiw	r24, 0x00	; 0
    2ef8:	69 f7       	brne	.-38     	; 0x2ed4 <ping_pong+0x1e4>
    2efa:	14 c0       	rjmp	.+40     	; 0x2f24 <ping_pong+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2efc:	6f 81       	ldd	r22, Y+7	; 0x07
    2efe:	78 85       	ldd	r23, Y+8	; 0x08
    2f00:	89 85       	ldd	r24, Y+9	; 0x09
    2f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	9e 83       	std	Y+6, r25	; 0x06
    2f0e:	8d 83       	std	Y+5, r24	; 0x05
    2f10:	8d 81       	ldd	r24, Y+5	; 0x05
    2f12:	9e 81       	ldd	r25, Y+6	; 0x06
    2f14:	9a 83       	std	Y+2, r25	; 0x02
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	f1 f7       	brne	.-4      	; 0x2f1c <ping_pong+0x22c>
    2f20:	9a 83       	std	Y+2, r25	; 0x02
    2f22:	89 83       	std	Y+1, r24	; 0x01
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i)); // LED shifts right
            _delay_ms(150);
        }
        // Moving left
        for (int8_t i = 6; i >= 0; i--)
    2f24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f26:	81 50       	subi	r24, 0x01	; 1
    2f28:	8d 8f       	std	Y+29, r24	; 0x1d
    2f2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f2c:	88 23       	and	r24, r24
    2f2e:	0c f0       	brlt	.+2      	; 0x2f32 <ping_pong+0x242>
    2f30:	76 cf       	rjmp	.-276    	; 0x2e1e <ping_pong+0x12e>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i)); // LED shifts left
            _delay_ms(150);
        }

        HKPD_u8GetPressedKey(&pressedKey); // Continuously check for key press
    2f32:	80 e8       	ldi	r24, 0x80	; 128
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	0e 94 45 11 	call	0x228a	; 0x228a <HKPD_u8GetPressedKey>
        if (pressedKey != '6') // Exit if key is no longer '6'
    2f3a:	80 91 80 00 	lds	r24, 0x0080
    2f3e:	86 33       	cpi	r24, 0x36	; 54
    2f40:	09 f4       	brne	.+2      	; 0x2f44 <ping_pong+0x254>
    2f42:	e0 ce       	rjmp	.-576    	; 0x2d04 <ping_pong+0x14>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, 0x00); // Turn off all LEDs
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	60 e0       	ldi	r22, 0x00	; 0
    2f48:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
            return; // Exit the function
        }
    }
}
    2f4c:	6e 96       	adiw	r28, 0x1e	; 30
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	cf 91       	pop	r28
    2f5a:	df 91       	pop	r29
    2f5c:	08 95       	ret

00002f5e <snake_effect>:

void snake_effect()
{
    2f5e:	df 93       	push	r29
    2f60:	cf 93       	push	r28
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	6e 97       	sbiw	r28, 0x1e	; 30
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    while (1)
    {
        // Snake moving right
        for (u8 i = 0; i < 8; i++)
    2f72:	1e 8e       	std	Y+30, r1	; 0x1e
    2f74:	84 c0       	rjmp	.+264    	; 0x307e <snake_effect+0x120>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i)); // LED shifts right
    2f76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f78:	28 2f       	mov	r18, r24
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	02 c0       	rjmp	.+4      	; 0x2f86 <snake_effect+0x28>
    2f82:	88 0f       	add	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	2a 95       	dec	r18
    2f88:	e2 f7       	brpl	.-8      	; 0x2f82 <snake_effect+0x24>
    2f8a:	98 2f       	mov	r25, r24
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	69 2f       	mov	r22, r25
    2f90:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	a8 e4       	ldi	r26, 0x48	; 72
    2f9a:	b3 e4       	ldi	r27, 0x43	; 67
    2f9c:	89 8f       	std	Y+25, r24	; 0x19
    2f9e:	9a 8f       	std	Y+26, r25	; 0x1a
    2fa0:	ab 8f       	std	Y+27, r26	; 0x1b
    2fa2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa4:	69 8d       	ldd	r22, Y+25	; 0x19
    2fa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2faa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	4a ef       	ldi	r20, 0xFA	; 250
    2fb2:	54 e4       	ldi	r21, 0x44	; 68
    2fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	8d 8b       	std	Y+21, r24	; 0x15
    2fbe:	9e 8b       	std	Y+22, r25	; 0x16
    2fc0:	af 8b       	std	Y+23, r26	; 0x17
    2fc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    2fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    2fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fca:	98 8d       	ldd	r25, Y+24	; 0x18
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	40 e8       	ldi	r20, 0x80	; 128
    2fd2:	5f e3       	ldi	r21, 0x3F	; 63
    2fd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fd8:	88 23       	and	r24, r24
    2fda:	2c f4       	brge	.+10     	; 0x2fe6 <snake_effect+0x88>
		__ticks = 1;
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	9c 8b       	std	Y+20, r25	; 0x14
    2fe2:	8b 8b       	std	Y+19, r24	; 0x13
    2fe4:	3f c0       	rjmp	.+126    	; 0x3064 <snake_effect+0x106>
	else if (__tmp > 65535)
    2fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    2fea:	8f 89       	ldd	r24, Y+23	; 0x17
    2fec:	98 8d       	ldd	r25, Y+24	; 0x18
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	3f ef       	ldi	r19, 0xFF	; 255
    2ff2:	4f e7       	ldi	r20, 0x7F	; 127
    2ff4:	57 e4       	ldi	r21, 0x47	; 71
    2ff6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ffa:	18 16       	cp	r1, r24
    2ffc:	4c f5       	brge	.+82     	; 0x3050 <snake_effect+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    3000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e2       	ldi	r20, 0x20	; 32
    300c:	51 e4       	ldi	r21, 0x41	; 65
    300e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	bc 01       	movw	r22, r24
    3018:	cd 01       	movw	r24, r26
    301a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	9c 8b       	std	Y+20, r25	; 0x14
    3024:	8b 8b       	std	Y+19, r24	; 0x13
    3026:	0f c0       	rjmp	.+30     	; 0x3046 <snake_effect+0xe8>
    3028:	88 ec       	ldi	r24, 0xC8	; 200
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	9a 8b       	std	Y+18, r25	; 0x12
    302e:	89 8b       	std	Y+17, r24	; 0x11
    3030:	89 89       	ldd	r24, Y+17	; 0x11
    3032:	9a 89       	ldd	r25, Y+18	; 0x12
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	f1 f7       	brne	.-4      	; 0x3034 <snake_effect+0xd6>
    3038:	9a 8b       	std	Y+18, r25	; 0x12
    303a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    303c:	8b 89       	ldd	r24, Y+19	; 0x13
    303e:	9c 89       	ldd	r25, Y+20	; 0x14
    3040:	01 97       	sbiw	r24, 0x01	; 1
    3042:	9c 8b       	std	Y+20, r25	; 0x14
    3044:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3046:	8b 89       	ldd	r24, Y+19	; 0x13
    3048:	9c 89       	ldd	r25, Y+20	; 0x14
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	69 f7       	brne	.-38     	; 0x3028 <snake_effect+0xca>
    304e:	14 c0       	rjmp	.+40     	; 0x3078 <snake_effect+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3050:	6d 89       	ldd	r22, Y+21	; 0x15
    3052:	7e 89       	ldd	r23, Y+22	; 0x16
    3054:	8f 89       	ldd	r24, Y+23	; 0x17
    3056:	98 8d       	ldd	r25, Y+24	; 0x18
    3058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	9c 8b       	std	Y+20, r25	; 0x14
    3062:	8b 8b       	std	Y+19, r24	; 0x13
    3064:	8b 89       	ldd	r24, Y+19	; 0x13
    3066:	9c 89       	ldd	r25, Y+20	; 0x14
    3068:	98 8b       	std	Y+16, r25	; 0x10
    306a:	8f 87       	std	Y+15, r24	; 0x0f
    306c:	8f 85       	ldd	r24, Y+15	; 0x0f
    306e:	98 89       	ldd	r25, Y+16	; 0x10
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	f1 f7       	brne	.-4      	; 0x3070 <snake_effect+0x112>
    3074:	98 8b       	std	Y+16, r25	; 0x10
    3076:	8f 87       	std	Y+15, r24	; 0x0f
void snake_effect()
{
    while (1)
    {
        // Snake moving right
        for (u8 i = 0; i < 8; i++)
    3078:	8e 8d       	ldd	r24, Y+30	; 0x1e
    307a:	8f 5f       	subi	r24, 0xFF	; 255
    307c:	8e 8f       	std	Y+30, r24	; 0x1e
    307e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3080:	88 30       	cpi	r24, 0x08	; 8
    3082:	08 f4       	brcc	.+2      	; 0x3086 <snake_effect+0x128>
    3084:	78 cf       	rjmp	.-272    	; 0x2f76 <snake_effect+0x18>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i)); // LED shifts right
            _delay_ms(200);
        }
        // Snake moving left
        for (int8_t i = 6; i >= 0; i--)
    3086:	86 e0       	ldi	r24, 0x06	; 6
    3088:	8d 8f       	std	Y+29, r24	; 0x1d
    308a:	86 c0       	rjmp	.+268    	; 0x3198 <snake_effect+0x23a>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i)); // LED shifts left
    308c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    308e:	28 2f       	mov	r18, r24
    3090:	33 27       	eor	r19, r19
    3092:	27 fd       	sbrc	r18, 7
    3094:	30 95       	com	r19
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	02 c0       	rjmp	.+4      	; 0x30a0 <snake_effect+0x142>
    309c:	88 0f       	add	r24, r24
    309e:	99 1f       	adc	r25, r25
    30a0:	2a 95       	dec	r18
    30a2:	e2 f7       	brpl	.-8      	; 0x309c <snake_effect+0x13e>
    30a4:	98 2f       	mov	r25, r24
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	69 2f       	mov	r22, r25
    30aa:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	a8 e4       	ldi	r26, 0x48	; 72
    30b4:	b3 e4       	ldi	r27, 0x43	; 67
    30b6:	8b 87       	std	Y+11, r24	; 0x0b
    30b8:	9c 87       	std	Y+12, r25	; 0x0c
    30ba:	ad 87       	std	Y+13, r26	; 0x0d
    30bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30be:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	4a ef       	ldi	r20, 0xFA	; 250
    30cc:	54 e4       	ldi	r21, 0x44	; 68
    30ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	8f 83       	std	Y+7, r24	; 0x07
    30d8:	98 87       	std	Y+8, r25	; 0x08
    30da:	a9 87       	std	Y+9, r26	; 0x09
    30dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30de:	6f 81       	ldd	r22, Y+7	; 0x07
    30e0:	78 85       	ldd	r23, Y+8	; 0x08
    30e2:	89 85       	ldd	r24, Y+9	; 0x09
    30e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e8       	ldi	r20, 0x80	; 128
    30ec:	5f e3       	ldi	r21, 0x3F	; 63
    30ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f2:	88 23       	and	r24, r24
    30f4:	2c f4       	brge	.+10     	; 0x3100 <snake_effect+0x1a2>
		__ticks = 1;
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	9e 83       	std	Y+6, r25	; 0x06
    30fc:	8d 83       	std	Y+5, r24	; 0x05
    30fe:	3f c0       	rjmp	.+126    	; 0x317e <snake_effect+0x220>
	else if (__tmp > 65535)
    3100:	6f 81       	ldd	r22, Y+7	; 0x07
    3102:	78 85       	ldd	r23, Y+8	; 0x08
    3104:	89 85       	ldd	r24, Y+9	; 0x09
    3106:	9a 85       	ldd	r25, Y+10	; 0x0a
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	3f ef       	ldi	r19, 0xFF	; 255
    310c:	4f e7       	ldi	r20, 0x7F	; 127
    310e:	57 e4       	ldi	r21, 0x47	; 71
    3110:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3114:	18 16       	cp	r1, r24
    3116:	4c f5       	brge	.+82     	; 0x316a <snake_effect+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3118:	6b 85       	ldd	r22, Y+11	; 0x0b
    311a:	7c 85       	ldd	r23, Y+12	; 0x0c
    311c:	8d 85       	ldd	r24, Y+13	; 0x0d
    311e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e2       	ldi	r20, 0x20	; 32
    3126:	51 e4       	ldi	r21, 0x41	; 65
    3128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	9e 83       	std	Y+6, r25	; 0x06
    313e:	8d 83       	std	Y+5, r24	; 0x05
    3140:	0f c0       	rjmp	.+30     	; 0x3160 <snake_effect+0x202>
    3142:	88 ec       	ldi	r24, 0xC8	; 200
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	9c 83       	std	Y+4, r25	; 0x04
    3148:	8b 83       	std	Y+3, r24	; 0x03
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	9c 81       	ldd	r25, Y+4	; 0x04
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	f1 f7       	brne	.-4      	; 0x314e <snake_effect+0x1f0>
    3152:	9c 83       	std	Y+4, r25	; 0x04
    3154:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3156:	8d 81       	ldd	r24, Y+5	; 0x05
    3158:	9e 81       	ldd	r25, Y+6	; 0x06
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	9e 83       	std	Y+6, r25	; 0x06
    315e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3160:	8d 81       	ldd	r24, Y+5	; 0x05
    3162:	9e 81       	ldd	r25, Y+6	; 0x06
    3164:	00 97       	sbiw	r24, 0x00	; 0
    3166:	69 f7       	brne	.-38     	; 0x3142 <snake_effect+0x1e4>
    3168:	14 c0       	rjmp	.+40     	; 0x3192 <snake_effect+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316a:	6f 81       	ldd	r22, Y+7	; 0x07
    316c:	78 85       	ldd	r23, Y+8	; 0x08
    316e:	89 85       	ldd	r24, Y+9	; 0x09
    3170:	9a 85       	ldd	r25, Y+10	; 0x0a
    3172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	9e 83       	std	Y+6, r25	; 0x06
    317c:	8d 83       	std	Y+5, r24	; 0x05
    317e:	8d 81       	ldd	r24, Y+5	; 0x05
    3180:	9e 81       	ldd	r25, Y+6	; 0x06
    3182:	9a 83       	std	Y+2, r25	; 0x02
    3184:	89 83       	std	Y+1, r24	; 0x01
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	f1 f7       	brne	.-4      	; 0x318a <snake_effect+0x22c>
    318e:	9a 83       	std	Y+2, r25	; 0x02
    3190:	89 83       	std	Y+1, r24	; 0x01
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i)); // LED shifts right
            _delay_ms(200);
        }
        // Snake moving left
        for (int8_t i = 6; i >= 0; i--)
    3192:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3194:	81 50       	subi	r24, 0x01	; 1
    3196:	8d 8f       	std	Y+29, r24	; 0x1d
    3198:	8d 8d       	ldd	r24, Y+29	; 0x1d
    319a:	88 23       	and	r24, r24
    319c:	0c f0       	brlt	.+2      	; 0x31a0 <snake_effect+0x242>
    319e:	76 cf       	rjmp	.-276    	; 0x308c <snake_effect+0x12e>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i)); // LED shifts left
            _delay_ms(200);
        }

        HKPD_u8GetPressedKey(&pressedKey); // Continuously check for key press
    31a0:	80 e8       	ldi	r24, 0x80	; 128
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	0e 94 45 11 	call	0x228a	; 0x228a <HKPD_u8GetPressedKey>
        if (pressedKey != '7') // Exit if key is no longer '7'
    31a8:	80 91 80 00 	lds	r24, 0x0080
    31ac:	87 33       	cpi	r24, 0x37	; 55
    31ae:	09 f4       	brne	.+2      	; 0x31b2 <snake_effect+0x254>
    31b0:	e0 ce       	rjmp	.-576    	; 0x2f72 <snake_effect+0x14>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, 0x00); // Turn off all LEDs
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	60 e0       	ldi	r22, 0x00	; 0
    31b6:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
            return; // Exit the function
        }
    }
}
    31ba:	6e 96       	adiw	r28, 0x1e	; 30
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	08 95       	ret

000031cc <converge_diverge_leds>:

void converge_diverge_leds()
{
    31cc:	df 93       	push	r29
    31ce:	cf 93       	push	r28
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
    31d4:	6e 97       	sbiw	r28, 0x1e	; 30
    31d6:	0f b6       	in	r0, 0x3f	; 63
    31d8:	f8 94       	cli
    31da:	de bf       	out	0x3e, r29	; 62
    31dc:	0f be       	out	0x3f, r0	; 63
    31de:	cd bf       	out	0x3d, r28	; 61
    while (1)
    {
        // Converging LEDs
        for (u8 i = 0; i < 4; i++)
    31e0:	1e 8e       	std	Y+30, r1	; 0x1e
    31e2:	96 c0       	rjmp	.+300    	; 0x3310 <converge_diverge_leds+0x144>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i) | (1 << (7 - i))); // LEDs move towards center
    31e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31e6:	28 2f       	mov	r18, r24
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <converge_diverge_leds+0x28>
    31f0:	88 0f       	add	r24, r24
    31f2:	99 1f       	adc	r25, r25
    31f4:	2a 95       	dec	r18
    31f6:	e2 f7       	brpl	.-8      	; 0x31f0 <converge_diverge_leds+0x24>
    31f8:	48 2f       	mov	r20, r24
    31fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31fc:	28 2f       	mov	r18, r24
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	87 e0       	ldi	r24, 0x07	; 7
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	bc 01       	movw	r22, r24
    3206:	62 1b       	sub	r22, r18
    3208:	73 0b       	sbc	r23, r19
    320a:	9b 01       	movw	r18, r22
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <converge_diverge_leds+0x4a>
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	2a 95       	dec	r18
    3218:	e2 f7       	brpl	.-8      	; 0x3212 <converge_diverge_leds+0x46>
    321a:	84 2b       	or	r24, r20
    321c:	98 2f       	mov	r25, r24
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	69 2f       	mov	r22, r25
    3222:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	a6 e9       	ldi	r26, 0x96	; 150
    322c:	b3 e4       	ldi	r27, 0x43	; 67
    322e:	89 8f       	std	Y+25, r24	; 0x19
    3230:	9a 8f       	std	Y+26, r25	; 0x1a
    3232:	ab 8f       	std	Y+27, r26	; 0x1b
    3234:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3236:	69 8d       	ldd	r22, Y+25	; 0x19
    3238:	7a 8d       	ldd	r23, Y+26	; 0x1a
    323a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    323c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	4a ef       	ldi	r20, 0xFA	; 250
    3244:	54 e4       	ldi	r21, 0x44	; 68
    3246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	8d 8b       	std	Y+21, r24	; 0x15
    3250:	9e 8b       	std	Y+22, r25	; 0x16
    3252:	af 8b       	std	Y+23, r26	; 0x17
    3254:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3256:	6d 89       	ldd	r22, Y+21	; 0x15
    3258:	7e 89       	ldd	r23, Y+22	; 0x16
    325a:	8f 89       	ldd	r24, Y+23	; 0x17
    325c:	98 8d       	ldd	r25, Y+24	; 0x18
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	40 e8       	ldi	r20, 0x80	; 128
    3264:	5f e3       	ldi	r21, 0x3F	; 63
    3266:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    326a:	88 23       	and	r24, r24
    326c:	2c f4       	brge	.+10     	; 0x3278 <converge_diverge_leds+0xac>
		__ticks = 1;
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	9c 8b       	std	Y+20, r25	; 0x14
    3274:	8b 8b       	std	Y+19, r24	; 0x13
    3276:	3f c0       	rjmp	.+126    	; 0x32f6 <converge_diverge_leds+0x12a>
	else if (__tmp > 65535)
    3278:	6d 89       	ldd	r22, Y+21	; 0x15
    327a:	7e 89       	ldd	r23, Y+22	; 0x16
    327c:	8f 89       	ldd	r24, Y+23	; 0x17
    327e:	98 8d       	ldd	r25, Y+24	; 0x18
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	3f ef       	ldi	r19, 0xFF	; 255
    3284:	4f e7       	ldi	r20, 0x7F	; 127
    3286:	57 e4       	ldi	r21, 0x47	; 71
    3288:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    328c:	18 16       	cp	r1, r24
    328e:	4c f5       	brge	.+82     	; 0x32e2 <converge_diverge_leds+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3290:	69 8d       	ldd	r22, Y+25	; 0x19
    3292:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3294:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3296:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	40 e2       	ldi	r20, 0x20	; 32
    329e:	51 e4       	ldi	r21, 0x41	; 65
    32a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	bc 01       	movw	r22, r24
    32aa:	cd 01       	movw	r24, r26
    32ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	9c 8b       	std	Y+20, r25	; 0x14
    32b6:	8b 8b       	std	Y+19, r24	; 0x13
    32b8:	0f c0       	rjmp	.+30     	; 0x32d8 <converge_diverge_leds+0x10c>
    32ba:	88 ec       	ldi	r24, 0xC8	; 200
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	9a 8b       	std	Y+18, r25	; 0x12
    32c0:	89 8b       	std	Y+17, r24	; 0x11
    32c2:	89 89       	ldd	r24, Y+17	; 0x11
    32c4:	9a 89       	ldd	r25, Y+18	; 0x12
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	f1 f7       	brne	.-4      	; 0x32c6 <converge_diverge_leds+0xfa>
    32ca:	9a 8b       	std	Y+18, r25	; 0x12
    32cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ce:	8b 89       	ldd	r24, Y+19	; 0x13
    32d0:	9c 89       	ldd	r25, Y+20	; 0x14
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	9c 8b       	std	Y+20, r25	; 0x14
    32d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d8:	8b 89       	ldd	r24, Y+19	; 0x13
    32da:	9c 89       	ldd	r25, Y+20	; 0x14
    32dc:	00 97       	sbiw	r24, 0x00	; 0
    32de:	69 f7       	brne	.-38     	; 0x32ba <converge_diverge_leds+0xee>
    32e0:	14 c0       	rjmp	.+40     	; 0x330a <converge_diverge_leds+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e2:	6d 89       	ldd	r22, Y+21	; 0x15
    32e4:	7e 89       	ldd	r23, Y+22	; 0x16
    32e6:	8f 89       	ldd	r24, Y+23	; 0x17
    32e8:	98 8d       	ldd	r25, Y+24	; 0x18
    32ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	9c 8b       	std	Y+20, r25	; 0x14
    32f4:	8b 8b       	std	Y+19, r24	; 0x13
    32f6:	8b 89       	ldd	r24, Y+19	; 0x13
    32f8:	9c 89       	ldd	r25, Y+20	; 0x14
    32fa:	98 8b       	std	Y+16, r25	; 0x10
    32fc:	8f 87       	std	Y+15, r24	; 0x0f
    32fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3300:	98 89       	ldd	r25, Y+16	; 0x10
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	f1 f7       	brne	.-4      	; 0x3302 <converge_diverge_leds+0x136>
    3306:	98 8b       	std	Y+16, r25	; 0x10
    3308:	8f 87       	std	Y+15, r24	; 0x0f
void converge_diverge_leds()
{
    while (1)
    {
        // Converging LEDs
        for (u8 i = 0; i < 4; i++)
    330a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    330c:	8f 5f       	subi	r24, 0xFF	; 255
    330e:	8e 8f       	std	Y+30, r24	; 0x1e
    3310:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3312:	84 30       	cpi	r24, 0x04	; 4
    3314:	08 f4       	brcc	.+2      	; 0x3318 <converge_diverge_leds+0x14c>
    3316:	66 cf       	rjmp	.-308    	; 0x31e4 <converge_diverge_leds+0x18>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i) | (1 << (7 - i))); // LEDs move towards center
            _delay_ms(300);
        }
        // Diverging LEDs
        for (int8_t i = 3; i >= 0; i--)
    3318:	83 e0       	ldi	r24, 0x03	; 3
    331a:	8d 8f       	std	Y+29, r24	; 0x1d
    331c:	9a c0       	rjmp	.+308    	; 0x3452 <converge_diverge_leds+0x286>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i) | (1 << (7 - i))); // LEDs move away from center
    331e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3320:	28 2f       	mov	r18, r24
    3322:	33 27       	eor	r19, r19
    3324:	27 fd       	sbrc	r18, 7
    3326:	30 95       	com	r19
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	02 c0       	rjmp	.+4      	; 0x3332 <converge_diverge_leds+0x166>
    332e:	88 0f       	add	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	2a 95       	dec	r18
    3334:	e2 f7       	brpl	.-8      	; 0x332e <converge_diverge_leds+0x162>
    3336:	48 2f       	mov	r20, r24
    3338:	8d 8d       	ldd	r24, Y+29	; 0x1d
    333a:	28 2f       	mov	r18, r24
    333c:	33 27       	eor	r19, r19
    333e:	27 fd       	sbrc	r18, 7
    3340:	30 95       	com	r19
    3342:	87 e0       	ldi	r24, 0x07	; 7
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	bc 01       	movw	r22, r24
    3348:	62 1b       	sub	r22, r18
    334a:	73 0b       	sbc	r23, r19
    334c:	9b 01       	movw	r18, r22
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <converge_diverge_leds+0x18c>
    3354:	88 0f       	add	r24, r24
    3356:	99 1f       	adc	r25, r25
    3358:	2a 95       	dec	r18
    335a:	e2 f7       	brpl	.-8      	; 0x3354 <converge_diverge_leds+0x188>
    335c:	84 2b       	or	r24, r20
    335e:	98 2f       	mov	r25, r24
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	69 2f       	mov	r22, r25
    3364:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	a6 e9       	ldi	r26, 0x96	; 150
    336e:	b3 e4       	ldi	r27, 0x43	; 67
    3370:	8b 87       	std	Y+11, r24	; 0x0b
    3372:	9c 87       	std	Y+12, r25	; 0x0c
    3374:	ad 87       	std	Y+13, r26	; 0x0d
    3376:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3378:	6b 85       	ldd	r22, Y+11	; 0x0b
    337a:	7c 85       	ldd	r23, Y+12	; 0x0c
    337c:	8d 85       	ldd	r24, Y+13	; 0x0d
    337e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	4a ef       	ldi	r20, 0xFA	; 250
    3386:	54 e4       	ldi	r21, 0x44	; 68
    3388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	8f 83       	std	Y+7, r24	; 0x07
    3392:	98 87       	std	Y+8, r25	; 0x08
    3394:	a9 87       	std	Y+9, r26	; 0x09
    3396:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3398:	6f 81       	ldd	r22, Y+7	; 0x07
    339a:	78 85       	ldd	r23, Y+8	; 0x08
    339c:	89 85       	ldd	r24, Y+9	; 0x09
    339e:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e8       	ldi	r20, 0x80	; 128
    33a6:	5f e3       	ldi	r21, 0x3F	; 63
    33a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ac:	88 23       	and	r24, r24
    33ae:	2c f4       	brge	.+10     	; 0x33ba <converge_diverge_leds+0x1ee>
		__ticks = 1;
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	9e 83       	std	Y+6, r25	; 0x06
    33b6:	8d 83       	std	Y+5, r24	; 0x05
    33b8:	3f c0       	rjmp	.+126    	; 0x3438 <converge_diverge_leds+0x26c>
	else if (__tmp > 65535)
    33ba:	6f 81       	ldd	r22, Y+7	; 0x07
    33bc:	78 85       	ldd	r23, Y+8	; 0x08
    33be:	89 85       	ldd	r24, Y+9	; 0x09
    33c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	3f ef       	ldi	r19, 0xFF	; 255
    33c6:	4f e7       	ldi	r20, 0x7F	; 127
    33c8:	57 e4       	ldi	r21, 0x47	; 71
    33ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ce:	18 16       	cp	r1, r24
    33d0:	4c f5       	brge	.+82     	; 0x3424 <converge_diverge_leds+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e2       	ldi	r20, 0x20	; 32
    33e0:	51 e4       	ldi	r21, 0x41	; 65
    33e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	bc 01       	movw	r22, r24
    33ec:	cd 01       	movw	r24, r26
    33ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	9e 83       	std	Y+6, r25	; 0x06
    33f8:	8d 83       	std	Y+5, r24	; 0x05
    33fa:	0f c0       	rjmp	.+30     	; 0x341a <converge_diverge_leds+0x24e>
    33fc:	88 ec       	ldi	r24, 0xC8	; 200
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	9c 83       	std	Y+4, r25	; 0x04
    3402:	8b 83       	std	Y+3, r24	; 0x03
    3404:	8b 81       	ldd	r24, Y+3	; 0x03
    3406:	9c 81       	ldd	r25, Y+4	; 0x04
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	f1 f7       	brne	.-4      	; 0x3408 <converge_diverge_leds+0x23c>
    340c:	9c 83       	std	Y+4, r25	; 0x04
    340e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3410:	8d 81       	ldd	r24, Y+5	; 0x05
    3412:	9e 81       	ldd	r25, Y+6	; 0x06
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	9e 83       	std	Y+6, r25	; 0x06
    3418:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341a:	8d 81       	ldd	r24, Y+5	; 0x05
    341c:	9e 81       	ldd	r25, Y+6	; 0x06
    341e:	00 97       	sbiw	r24, 0x00	; 0
    3420:	69 f7       	brne	.-38     	; 0x33fc <converge_diverge_leds+0x230>
    3422:	14 c0       	rjmp	.+40     	; 0x344c <converge_diverge_leds+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3424:	6f 81       	ldd	r22, Y+7	; 0x07
    3426:	78 85       	ldd	r23, Y+8	; 0x08
    3428:	89 85       	ldd	r24, Y+9	; 0x09
    342a:	9a 85       	ldd	r25, Y+10	; 0x0a
    342c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	9e 83       	std	Y+6, r25	; 0x06
    3436:	8d 83       	std	Y+5, r24	; 0x05
    3438:	8d 81       	ldd	r24, Y+5	; 0x05
    343a:	9e 81       	ldd	r25, Y+6	; 0x06
    343c:	9a 83       	std	Y+2, r25	; 0x02
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	9a 81       	ldd	r25, Y+2	; 0x02
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <converge_diverge_leds+0x278>
    3448:	9a 83       	std	Y+2, r25	; 0x02
    344a:	89 83       	std	Y+1, r24	; 0x01
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i) | (1 << (7 - i))); // LEDs move towards center
            _delay_ms(300);
        }
        // Diverging LEDs
        for (int8_t i = 3; i >= 0; i--)
    344c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    344e:	81 50       	subi	r24, 0x01	; 1
    3450:	8d 8f       	std	Y+29, r24	; 0x1d
    3452:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3454:	88 23       	and	r24, r24
    3456:	0c f0       	brlt	.+2      	; 0x345a <converge_diverge_leds+0x28e>
    3458:	62 cf       	rjmp	.-316    	; 0x331e <converge_diverge_leds+0x152>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, (1 << i) | (1 << (7 - i))); // LEDs move away from center
            _delay_ms(300);
        }

        HKPD_u8GetPressedKey(&pressedKey); // Continuously check for key press
    345a:	80 e8       	ldi	r24, 0x80	; 128
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	0e 94 45 11 	call	0x228a	; 0x228a <HKPD_u8GetPressedKey>
        if (pressedKey != '8') // Exit if key is no longer '8'
    3462:	80 91 80 00 	lds	r24, 0x0080
    3466:	88 33       	cpi	r24, 0x38	; 56
    3468:	09 f4       	brne	.+2      	; 0x346c <converge_diverge_leds+0x2a0>
    346a:	ba ce       	rjmp	.-652    	; 0x31e0 <converge_diverge_leds+0x14>
        {
            MDIO_u8SetPortValue(MDIO_PORTB, 0x00); // Turn off all LEDs
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	60 e0       	ldi	r22, 0x00	; 0
    3470:	0e 94 ce 09 	call	0x139c	; 0x139c <MDIO_u8SetPortValue>
            return; // Exit the function
        }
    }
}
    3474:	6e 96       	adiw	r28, 0x1e	; 30
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	cf 91       	pop	r28
    3482:	df 91       	pop	r29
    3484:	08 95       	ret

00003486 <__divmodhi4>:
    3486:	97 fb       	bst	r25, 7
    3488:	09 2e       	mov	r0, r25
    348a:	07 26       	eor	r0, r23
    348c:	0a d0       	rcall	.+20     	; 0x34a2 <__divmodhi4_neg1>
    348e:	77 fd       	sbrc	r23, 7
    3490:	04 d0       	rcall	.+8      	; 0x349a <__divmodhi4_neg2>
    3492:	0c d0       	rcall	.+24     	; 0x34ac <__udivmodhi4>
    3494:	06 d0       	rcall	.+12     	; 0x34a2 <__divmodhi4_neg1>
    3496:	00 20       	and	r0, r0
    3498:	1a f4       	brpl	.+6      	; 0x34a0 <__divmodhi4_exit>

0000349a <__divmodhi4_neg2>:
    349a:	70 95       	com	r23
    349c:	61 95       	neg	r22
    349e:	7f 4f       	sbci	r23, 0xFF	; 255

000034a0 <__divmodhi4_exit>:
    34a0:	08 95       	ret

000034a2 <__divmodhi4_neg1>:
    34a2:	f6 f7       	brtc	.-4      	; 0x34a0 <__divmodhi4_exit>
    34a4:	90 95       	com	r25
    34a6:	81 95       	neg	r24
    34a8:	9f 4f       	sbci	r25, 0xFF	; 255
    34aa:	08 95       	ret

000034ac <__udivmodhi4>:
    34ac:	aa 1b       	sub	r26, r26
    34ae:	bb 1b       	sub	r27, r27
    34b0:	51 e1       	ldi	r21, 0x11	; 17
    34b2:	07 c0       	rjmp	.+14     	; 0x34c2 <__udivmodhi4_ep>

000034b4 <__udivmodhi4_loop>:
    34b4:	aa 1f       	adc	r26, r26
    34b6:	bb 1f       	adc	r27, r27
    34b8:	a6 17       	cp	r26, r22
    34ba:	b7 07       	cpc	r27, r23
    34bc:	10 f0       	brcs	.+4      	; 0x34c2 <__udivmodhi4_ep>
    34be:	a6 1b       	sub	r26, r22
    34c0:	b7 0b       	sbc	r27, r23

000034c2 <__udivmodhi4_ep>:
    34c2:	88 1f       	adc	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	5a 95       	dec	r21
    34c8:	a9 f7       	brne	.-22     	; 0x34b4 <__udivmodhi4_loop>
    34ca:	80 95       	com	r24
    34cc:	90 95       	com	r25
    34ce:	bc 01       	movw	r22, r24
    34d0:	cd 01       	movw	r24, r26
    34d2:	08 95       	ret

000034d4 <__prologue_saves__>:
    34d4:	2f 92       	push	r2
    34d6:	3f 92       	push	r3
    34d8:	4f 92       	push	r4
    34da:	5f 92       	push	r5
    34dc:	6f 92       	push	r6
    34de:	7f 92       	push	r7
    34e0:	8f 92       	push	r8
    34e2:	9f 92       	push	r9
    34e4:	af 92       	push	r10
    34e6:	bf 92       	push	r11
    34e8:	cf 92       	push	r12
    34ea:	df 92       	push	r13
    34ec:	ef 92       	push	r14
    34ee:	ff 92       	push	r15
    34f0:	0f 93       	push	r16
    34f2:	1f 93       	push	r17
    34f4:	cf 93       	push	r28
    34f6:	df 93       	push	r29
    34f8:	cd b7       	in	r28, 0x3d	; 61
    34fa:	de b7       	in	r29, 0x3e	; 62
    34fc:	ca 1b       	sub	r28, r26
    34fe:	db 0b       	sbc	r29, r27
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	09 94       	ijmp

0000350c <__epilogue_restores__>:
    350c:	2a 88       	ldd	r2, Y+18	; 0x12
    350e:	39 88       	ldd	r3, Y+17	; 0x11
    3510:	48 88       	ldd	r4, Y+16	; 0x10
    3512:	5f 84       	ldd	r5, Y+15	; 0x0f
    3514:	6e 84       	ldd	r6, Y+14	; 0x0e
    3516:	7d 84       	ldd	r7, Y+13	; 0x0d
    3518:	8c 84       	ldd	r8, Y+12	; 0x0c
    351a:	9b 84       	ldd	r9, Y+11	; 0x0b
    351c:	aa 84       	ldd	r10, Y+10	; 0x0a
    351e:	b9 84       	ldd	r11, Y+9	; 0x09
    3520:	c8 84       	ldd	r12, Y+8	; 0x08
    3522:	df 80       	ldd	r13, Y+7	; 0x07
    3524:	ee 80       	ldd	r14, Y+6	; 0x06
    3526:	fd 80       	ldd	r15, Y+5	; 0x05
    3528:	0c 81       	ldd	r16, Y+4	; 0x04
    352a:	1b 81       	ldd	r17, Y+3	; 0x03
    352c:	aa 81       	ldd	r26, Y+2	; 0x02
    352e:	b9 81       	ldd	r27, Y+1	; 0x01
    3530:	ce 0f       	add	r28, r30
    3532:	d1 1d       	adc	r29, r1
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	ed 01       	movw	r28, r26
    3540:	08 95       	ret

00003542 <_exit>:
    3542:	f8 94       	cli

00003544 <__stop_program>:
    3544:	ff cf       	rjmp	.-2      	; 0x3544 <__stop_program>
